[{"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\index.js":"1","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\App.js":"2","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\LoginScreen\\loginScreen.jsx":"3","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\LoginWindow\\loginWindow.jsx":"4","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\MainDashboard\\mainDashboard.jsx":"5","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\utils\\API.js":"6","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\utils\\UserContext.js":"7","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\FavoriteCharacter\\favoriteCharacter.jsx":"8","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\UserStats\\userStats.jsx":"9","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\JoinIronMan\\joinIronMan.jsx":"10","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\CreateIronMan\\createIronMan.jsx":"11","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\FavCharStats\\favCharStats.jsx":"12","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\Arena\\arena.jsx":"13","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\SquadMaker\\squadMaker.jsx":"14","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\LeaderBoard\\leaderBoard.jsx":"15","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\Footer\\footer.jsx":"16"},{"size":264,"mtime":1622675929259,"results":"17","hashOfConfig":"18"},{"size":1744,"mtime":1629744759978,"results":"19","hashOfConfig":"18"},{"size":757,"mtime":1629307566021,"results":"20","hashOfConfig":"18"},{"size":509,"mtime":1628799036306,"results":"21","hashOfConfig":"18"},{"size":4450,"mtime":1629745276189,"results":"22","hashOfConfig":"18"},{"size":1227,"mtime":1629569221103,"results":"23","hashOfConfig":"18"},{"size":215,"mtime":1629316613631,"results":"24","hashOfConfig":"18"},{"size":1014,"mtime":1629744982273,"results":"25","hashOfConfig":"18"},{"size":1372,"mtime":1629567708417,"results":"26","hashOfConfig":"18"},{"size":3334,"mtime":1629567429551,"results":"27","hashOfConfig":"18"},{"size":4838,"mtime":1629403078361,"results":"28","hashOfConfig":"18"},{"size":634,"mtime":1629336649389,"results":"29","hashOfConfig":"18"},{"size":1980,"mtime":1629410725978,"results":"30","hashOfConfig":"18"},{"size":13351,"mtime":1629740261252,"results":"31","hashOfConfig":"18"},{"size":2397,"mtime":1629742090595,"results":"32","hashOfConfig":"18"},{"size":204,"mtime":1629744644638,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"400cep",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\index.js",[],["71","72"],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\App.js",["73"],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\LoginScreen\\loginScreen.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\LoginWindow\\loginWindow.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\MainDashboard\\mainDashboard.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\utils\\API.js",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\utils\\UserContext.js",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\FavoriteCharacter\\favoriteCharacter.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\UserStats\\userStats.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\JoinIronMan\\joinIronMan.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\CreateIronMan\\createIronMan.jsx",["74"],"import { React, useState, useContext, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Modal from \"react-modal\";\r\nimport API from \"../../utils/API\";\r\nimport UserContext from \"../../utils/UserContext\";\r\nimport CharData from \"../../utils/SmashCharacters.json\";\r\nimport \"./createIronMan.css\";\r\n\r\nfunction CreateIronMan(props) {\r\n\r\n    const { name, portrait, LobbyCode } = useContext(UserContext);\r\n\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    const modalToggle = () => {\r\n        if (modalIsOpen === true) {\r\n            setModalIsOpen(false);\r\n        }\r\n        else {\r\n            setModalIsOpen(true);\r\n        }\r\n    }\r\n\r\n    const customStyles = {\r\n        content: {\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            right: \"auto\",\r\n            bottom: \"auto\",\r\n            marginRight: \"-50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            background: \"rgb(189, 189, 189)\"\r\n        }\r\n    };\r\n\r\n    const [arenaState, setArenaState] = useState({\r\n        brawlers: \"\",\r\n    });\r\n\r\n    const launchArena = () => {\r\n        const lobbyCode = Date.now().toString().substring(Date.now().toString().length - 6)\r\n        const roster = (brawlers) => {\r\n            const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\r\n                \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\r\n                \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\",\r\n                \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\",\r\n                \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"];\r\n            const array = [];\r\n            for (let i = 0; i < brawlers; i++) {\r\n                const ranNum = Math.floor(Math.random() * (71 - i));\r\n                array.push(numbers[ranNum]);\r\n                numbers.splice(ranNum, 1);\r\n            }\r\n            return array;\r\n        }\r\n        const squadIds = roster(arenaState.brawlers);\r\n        const squad = squadIds.map(squadId => CharData.characters.find(character => character.id === squadId));\r\n        const arenaData = {\r\n            brawlers: arenaState.brawlers,\r\n            lobbyCode: lobbyCode.substring(lobbyCode.length - 6),\r\n            participants: { name: name, portrait: portrait, squad: squad, wins: 0, currCharacter:squad[0].name },\r\n            admin:name\r\n        }\r\n        API.saveArena(arenaData, lobbyCode)\r\n            .then(async (res) => {\r\n                try {\r\n                    await props.updateContext(res.data.lobbyCode, res.data.participants, res.data.brawlers)\r\n                }\r\n                catch (err) {\r\n                    throw err\r\n                }\r\n            });\r\n    }\r\n    useEffect(() => {\r\n        if (LobbyCode.length === 6) {\r\n            history.push(\"/arena/\" + LobbyCode)\r\n        }\r\n    }, [LobbyCode]);\r\n\r\n    const handleInputChange = (event) => {\r\n            setArenaState({ ...arenaState, brawlers: event.target.value })\r\n        \r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col sm={12} md={12}>\r\n                    <div id=\"createIronMan\">\r\n                        <h1>Create</h1>\r\n                        <h4 id=\"createText\">Create An Iron Man Arena For Others To Join And Set The Team Size</h4>\r\n                        <Modal\r\n                            isOpen={modalIsOpen}\r\n                            style={customStyles}\r\n                            contentLabel=\"Modal\">\r\n                            <button\r\n                                onClick={modalToggle}>Close\r\n                            </button>\r\n                            <br />\r\n                            <br />\r\n                            <h2>Create Your Arena</h2>\r\n                            <br />\r\n                            <h3>How Many Brawlers on a Squad?</h3>\r\n                            <input\r\n                                id=\"brawlwers\"\r\n                                type=\"number\"\r\n                                min=\"2\"\r\n                                onChange={handleInputChange}\r\n                                required />\r\n                            <br />\r\n                            <br />\r\n                            <button\r\n                                onClick={launchArena}\r\n                            >Go Smashing</button>\r\n                        </Modal>\r\n                        <button className=\"createButton\" onClick={modalToggle}>Smash Time</button>\r\n                    </div >\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CreateIronMan;","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\FavCharStats\\favCharStats.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\Arena\\arena.jsx",["75"],"import { React, useEffect, useState } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport SquadMaker from \"../../components/SquadMaker/squadMaker\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./arena.css\";\r\n\r\nfunction Arena() {\r\n    const lobbyCode = window.location.pathname.substr(-6);\r\n    const [arenaData, setArenaData] = useState();\r\n\r\n    const leaveArena = () => {\r\n        window.open(\"http://localhost:3000/dashboard\",\"_self\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        API.getArenaByLobbyCode(lobbyCode)\r\n            .then((res) => {\r\n                setArenaData({\r\n                    LobbyCode: res.data.lobbyCode,\r\n                    brawlers: res.data.brawlers,\r\n                    participants: res.data.participants.length\r\n                })\r\n            })\r\n    }, []);\r\n    if (arenaData !== undefined) {\r\n        return (\r\n            <Container id=\"arena\" fluid>\r\n                <Row id=\"header\">\r\n                    <Col sm={12} md={10}>\r\n                        <h1 id=\"header1\">Welcome to Smash Town</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={2}>\r\n                        <button\r\n                        id=\"leaveButton\"\r\n                        onClick={leaveArena}\r\n                        >Leave Arena</button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"smallHeaders\" sm={12} md={12}>\r\n                        <h4>Lobby Code: {arenaData.LobbyCode}</h4>\r\n                    </Col>\r\n                    <Col className=\"smallHeaders\" sm={12} md={12}>\r\n                        <h4>{arenaData.brawlers} Man Iron Man</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row id=\"rosterWindow\">\r\n                    <SquadMaker />\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Arena;","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\SquadMaker\\squadMaker.jsx",["76","77"],"import { React, useEffect, useState, useContext } from \"react\";\r\nimport UserContext from \"../../utils/UserContext\";\r\nimport Modal from \"react-modal\";\r\nimport API from \"../../utils/API\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./squadMaker.css\";\r\n\r\nfunction SquadMaker() {\r\n    const lobbyCode = window.location.pathname.substr(-6);\r\n    const { name } = useContext(UserContext);\r\n    const [participants, setParticipants] = useState([]);\r\n    const [arenaData, setArenaData] = useState({});\r\n    const [winner, setWinner] = useState({\r\n        name: \"\",\r\n        portrait: \"\"\r\n    });\r\n\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n    const modalToggle = () => {\r\n            setModalIsOpen(true);\r\n    };\r\n\r\n    const customStyles = {\r\n        content: {\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            right: \"auto\",\r\n            bottom: \"auto\",\r\n            marginRight: \"-50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            background: \"rgb(189, 189, 189)\",\r\n        }\r\n    };\r\n\r\n    const exitArena = () => {\r\n        window.open(\"http://localhost:3000/dashboard\", \"_self\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        let myInterval = setInterval(() => {\r\n            API.getArenaByLobbyCode(lobbyCode)\r\n                .then((res) => {\r\n                    setParticipants(res.data.participants)\r\n                    setArenaData({\r\n                        brawlers: res.data.brawlers,\r\n                        lobbyCode: res.data.lobbyCode,\r\n                        participants: res.data.participants,\r\n                        admin: res.data.admin\r\n                    });\r\n                })\r\n        }, 4000)\r\n        return () => {\r\n            clearInterval(myInterval)\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        participants.forEach(participant => {\r\n            if (parseInt(participant.wins) === parseInt(arenaData.brawlers)) {\r\n                setWinner({ ...winner, name: participant.name, portrait: participant.portrait })\r\n                modalToggle();\r\n            }\r\n        })\r\n    }, [arenaData])\r\n\r\n    const updater = (event) => {\r\n        const participantName = event.target.attributes.name.value;\r\n        const participantData = participants.find(participant => participant.name === participantName);\r\n        const participantSquad = participantData.squad;\r\n        participants.forEach((participant) => {\r\n            const winningCharacter = participant.currCharacter;\r\n            API.getUserByName(participant.name)\r\n                .then(async (res) => {\r\n                    try {\r\n                        if (res.data.name === participantName) {\r\n                            await res.data.characterStats.forEach(character => {\r\n                                if (character.name === winningCharacter) {\r\n                                    character.wins = character.wins + 1;\r\n                                };\r\n                            });\r\n                            const newUserData = {\r\n                                characterStats: res.data.characterStats,\r\n                            }\r\n                            API.updateUserByName(res.data.name, newUserData);\r\n                        }\r\n                        else {\r\n                            await res.data.characterStats.forEach(character => {\r\n                                if (character.name === participant.currCharacter) {\r\n                                    character.losses = character.losses + 1;\r\n                                };\r\n                            });\r\n                            const newUserData = {\r\n                                characterStats: res.data.characterStats,\r\n                            }\r\n                            API.updateUserByName(res.data.name, newUserData);\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        throw err;\r\n                    }\r\n                })\r\n        })\r\n        if (participantData.wins + 1 !== participantData.squad.length) {\r\n            for (let i = 0; i < participantData.wins + 1; i++) {\r\n                participantSquad[i].didWin = true;\r\n            }\r\n            if (participantSquad[participantData.squad.length - 1].hidden === true) {\r\n                for (let i = 0; i < participantData.wins + 2; i++) {\r\n                    participantSquad[i].hidden = false;\r\n                    const index = participants.findIndex(participant => participant.name === participantName);\r\n                    arenaData.participants[index].currCharacter = participantSquad.find(character => character.didWin === false).name;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            participantSquad[participantSquad.length - 1].didWin = true;\r\n            participants.forEach(participant => {\r\n                API.getUserByName(participant.name)\r\n                    .then((res) => {\r\n                        if (res.data.name === participantName) {\r\n                            const newData = {\r\n                                ironManStats: { wins: res.data.ironManStats.wins + 1, losses: res.data.ironManStats.losses }\r\n                            };\r\n                            API.updateUserByName(res.data.name, newData);\r\n                        }\r\n                        else {\r\n                            const newData = {\r\n                                ironManStats: { wins: res.data.ironManStats.wins, losses: res.data.ironManStats.losses + 1 },\r\n                            };\r\n                            API.updateUserByName(res.data.name, newData);\r\n                        }\r\n                        setWinner({ ...winner, name: participantData.name, portrait: participantData.portrait })\r\n                        modalToggle();\r\n                    })\r\n            })\r\n        }\r\n        const index = participants.findIndex(participant => participant.name === participantName);\r\n        participants[index] = participantData;\r\n        arenaData.participants[index].wins++;\r\n        setArenaData({ ...arenaData, participants: participants });\r\n        API.updateArena(lobbyCode, arenaData);\r\n    }\r\n\r\n    if (participants !== undefined) {\r\n        if (name === arenaData.admin) {\r\n            return (\r\n                <Container fluid>\r\n                    {participants.map((participant) => {\r\n                        return (\r\n                            <Row id=\"roster\">\r\n                                <Row>\r\n                                    <Col sm={1} md={1}>\r\n                                        <button name={participant.name} onClick={updater} id=\"victoryButton\" >Victorious</button>\r\n                                    </Col>\r\n                                    <Col id=\"userHeader\" sm={10} md={10}>\r\n                                        <img id=\"userPortrait\" src={participant.portrait} alt=\"participants portrait\" />\r\n                                        <h3 id=\"userName\">{participant.name}'s Roster</h3>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col id=\"characterList\" sm={12} md={12} >\r\n                                        {participant.squad.map(character => {\r\n                                            if (character.hidden === true && character !== participant.squad[0]) {\r\n                                                return (\r\n                                                    <div className=\"hiddenContainer\">\r\n                                                        <div className=\"hidden\" />\r\n                                                        <p>???</p>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            else {\r\n                                                return (\r\n                                                    <div className=\"character\">\r\n                                                        <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\r\n                                                        <p id=\"characterName\">{character.name}</p>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                        <Modal\r\n                                            isOpen={modalIsOpen}\r\n                                            style={customStyles}\r\n                                            contentLabel=\"Modal\"\r\n                                            id=\"winnerModal\">\r\n                                            <h1>Congratulations!</h1>\r\n                                            <br />\r\n                                            <h2> {winner.name} </h2>\r\n                                            <br />\r\n                                            <img alt=\"winner portrait\" src={winner.portrait} id=\"winnerPortrait\" />\r\n                                            <br />\r\n                                            <br />\r\n                                            <h3> You Are The Smash King</h3>\r\n                                            <br />\r\n                                            <button\r\n                                                onClick={exitArena}\r\n                                            >Exit Arena</button>\r\n                                        </Modal>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Row>\r\n                        )\r\n                    })}\r\n                </Container>\r\n\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <Container fluid>\r\n                    {participants.map((participant) => {\r\n                        return (\r\n                            <Row id=\"roster\">\r\n                                <Row>\r\n                                    <Col id=\"userHeader\" sm={12} md={12}>\r\n                                        <img id=\"userPortrait\" src={participant.portrait} alt=\"participants portrait\" />\r\n                                        <h3 id=\"userName\">{participant.name}'s Roster</h3>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col id=\"characterList\" sm={12} md={12} >\r\n                                        {participant.squad.map(character => {\r\n                                            if (character.hidden === true && character !== participant.squad[0]) {\r\n                                                return (\r\n                                                    <div className=\"hiddenContainer\">\r\n                                                        <div className=\"hidden\" />\r\n                                                        <p>???</p>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            else {\r\n                                                return (\r\n                                                    <div className=\"character\">\r\n                                                        <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\r\n                                                        <p id=\"characterName\">{character.name}</p>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                        <Modal\r\n                                            isOpen={modalIsOpen}\r\n                                            style={customStyles}\r\n                                            contentLabel=\"Modal\"\r\n                                            id=\"winnerModal\">\r\n                                            <h1>Congratulations!</h1>\r\n                                            <br />\r\n                                            <h2> {winner.name} </h2>\r\n                                            <br />\r\n                                            <img alt=\"winner portrait\" src={winner.portrait} id=\"winnerPortrait\" />\r\n                                            <br />\r\n                                            <br />\r\n                                            <h3> You Are The Smash King</h3>\r\n                                            <br />\r\n                                            <button\r\n                                                onClick={exitArena}\r\n                                            >Exit Arena</button>\r\n                                        </Modal>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Row>\r\n                        )\r\n                    })}\r\n                </Container>\r\n\r\n            )\r\n        };\r\n    }\r\n    else {\r\n        return <></>\r\n    }\r\n}\r\nexport default SquadMaker;","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\LeaderBoard\\leaderBoard.jsx",["78"],"import { React, useState, useEffect } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport { Row, Col, Table } from \"react-bootstrap\";\r\nimport \"./leaderBoard.css\"\r\n\r\nfunction LeaderBoard() {\r\n\r\n    const [users, setUsers] = useState([])\r\n\r\n    useEffect(() => {\r\n        API.getAllUsers()\r\n            .then((res) => {\r\n                setUsers(res.data);\r\n                console.log(users, \"users\")\r\n                console.log(res.data, \"res.data\")\r\n            })\r\n    }, []);\r\n\r\n    if (users.length > 0) {\r\n        users.sort((a, b) => parseFloat(b.ironManStats.wins) - parseFloat(a.ironManStats.wins));\r\n        return (\r\n                <Row>\r\n                    <Col sm={12} md={12} id=\"leaderBoard\">\r\n                    <Table striped bordered hover >\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Portrait</th>\r\n                                <th>Name</th>\r\n                                <th>Wins</th>\r\n                                <th>Losses</th>\r\n                                <th>Win %</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                users.map(user => {\r\n                                    const totalGames = parseInt(user.ironManStats.wins) + parseInt(user.ironManStats.losses);\r\n                                    const winPercentage = Math.round(parseInt(user.ironManStats.wins) / totalGames * 100)\r\n                                    return (\r\n                                        <tr id=\"tableRow\">\r\n                                            <td> <img alt=\"user portrait\" src={user.portrait} id=\"boardPortrait\" /></td>\r\n                                            <td>{user.name}</td>\r\n                                            <td>{user.ironManStats.wins}</td>\r\n                                            <td>{user.ironManStats.losses}</td>\r\n                                            <td>{winPercentage}%</td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                        </tbody>\r\n                    </Table>\r\n                    </Col>\r\n                </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default LeaderBoard","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\Footer\\footer.jsx",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":52,"column":6,"nodeType":"85","endLine":52,"endColumn":8,"suggestions":"86"},{"ruleId":"83","severity":1,"message":"87","line":81,"column":8,"nodeType":"85","endLine":81,"endColumn":19,"suggestions":"88"},{"ruleId":"83","severity":1,"message":"89","line":24,"column":8,"nodeType":"85","endLine":24,"endColumn":10,"suggestions":"90"},{"ruleId":"83","severity":1,"message":"89","line":56,"column":8,"nodeType":"85","endLine":56,"endColumn":10,"suggestions":"91"},{"ruleId":"83","severity":1,"message":"92","line":65,"column":8,"nodeType":"85","endLine":65,"endColumn":19,"suggestions":"93"},{"ruleId":"83","severity":1,"message":"94","line":17,"column":8,"nodeType":"85","endLine":17,"endColumn":10,"suggestions":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userState'. Either include it or remove the dependency array. You can also do a functional update 'setUserState(u => ...)' if you only need 'userState' in the 'setUserState' call.","ArrayExpression",["98"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["99"],"React Hook useEffect has a missing dependency: 'lobbyCode'. Either include it or remove the dependency array.",["100"],["101"],"React Hook useEffect has missing dependencies: 'participants' and 'winner'. Either include them or remove the dependency array. You can also do a functional update 'setWinner(w => ...)' if you only need 'winner' in the 'setWinner' call.",["102"],"React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array.",["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"108","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [userState]",{"range":"115","text":"116"},"Update the dependencies array to be: [LobbyCode, history]",{"range":"117","text":"118"},"Update the dependencies array to be: [lobbyCode]",{"range":"119","text":"120"},{"range":"121","text":"120"},"Update the dependencies array to be: [arenaData, participants, winner]",{"range":"122","text":"123"},"Update the dependencies array to be: [users]",{"range":"124","text":"125"},[1264,1266],"[userState]",[3072,3083],"[LobbyCode, history]",[814,816],"[lobbyCode]",[1777,1779],[2099,2110],"[arenaData, participants, winner]",[481,483],"[users]"]