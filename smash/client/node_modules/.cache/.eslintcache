[{"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\index.js":"1","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\App.js":"2","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\LoginScreen\\loginScreen.jsx":"3","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\LoginWindow\\loginWindow.jsx":"4","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\MainDashboard\\mainDashboard.jsx":"5","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\utils\\API.js":"6","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\utils\\UserContext.js":"7","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\FavoriteCharacter\\favoriteCharacter.jsx":"8","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\UserStats\\userStats.jsx":"9","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\JoinIronMan\\joinIronMan.jsx":"10","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\CreateIronMan\\createIronMan.jsx":"11","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\FavCharStats\\favCharStats.jsx":"12","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\Arena\\arena.jsx":"13","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\SquadMaker\\squadMaker.jsx":"14"},{"size":264,"mtime":1622675929259,"results":"15","hashOfConfig":"16"},{"size":1700,"mtime":1629317342958,"results":"17","hashOfConfig":"16"},{"size":757,"mtime":1629307566021,"results":"18","hashOfConfig":"16"},{"size":509,"mtime":1628799036306,"results":"19","hashOfConfig":"16"},{"size":3903,"mtime":1629320223197,"results":"20","hashOfConfig":"16"},{"size":1146,"mtime":1629316930338,"results":"21","hashOfConfig":"16"},{"size":215,"mtime":1629316613631,"results":"22","hashOfConfig":"16"},{"size":991,"mtime":1628966201519,"results":"23","hashOfConfig":"16"},{"size":1599,"mtime":1629316915918,"results":"24","hashOfConfig":"16"},{"size":2896,"mtime":1629227417163,"results":"25","hashOfConfig":"16"},{"size":4784,"mtime":1629230068523,"results":"26","hashOfConfig":"16"},{"size":586,"mtime":1629320317901,"results":"27","hashOfConfig":"16"},{"size":2133,"mtime":1629307989160,"results":"28","hashOfConfig":"16"},{"size":6527,"mtime":1629314742137,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"400cep",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\index.js",[],["63","64"],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\App.js",["65"],"import { React, useState, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Login from \"./pages/LoginScreen/loginScreen\";\nimport Dashboard from \"./pages/MainDashboard/mainDashboard\";\nimport Arena from \"./pages/Arena/arena\";\nimport axios from \"axios\";\nimport API from \"./utils/API\";\nimport UserContext from \"./utils/UserContext\";\n\nfunction App() {\n\n  const [userState, setUserState] = useState({\n    id: \"\",\n    name: \"\",\n    portrait: \"\",\n    LobbyCode: \"\",\n    participants: [],\n    competitors: \"\",\n    brawlers: \"\"\n  });\n\n\n  const updateContext = (LobbyCode, participants, brawlers) => {\n    setUserState({\n      ...userState,\n      LobbyCode: LobbyCode,\n      participants: participants,\n      brawlers: brawlers\n    })\n  }\n\n  useEffect(() => {\n    axios\n      .get(\"/User\")\n      .then((res) => {\n        if (res.data.id) {\n          API.getUserByUserId(res.data.id)\n            .then(res => {\n              setUserState({\n                ...userState,\n                id: res.data._id,\n                name: res.data.name,\n                portrait: res.data.portrait,\n              });\n            });\n        }\n        else {\n          return;\n        }\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <UserContext.Provider value={userState} id=\"container\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route exact path=\"/dashboard\" >\n            <Dashboard updateContext={updateContext} />\n          </Route>\n          <Route path=\"/arena\" component={Arena} />\n        </Switch>\n      </BrowserRouter>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\LoginScreen\\loginScreen.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\LoginWindow\\loginWindow.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\MainDashboard\\mainDashboard.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\utils\\API.js",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\utils\\UserContext.js",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\FavoriteCharacter\\favoriteCharacter.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\UserStats\\userStats.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\JoinIronMan\\joinIronMan.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\CreateIronMan\\createIronMan.jsx",["66"],"import { React, useState, useContext, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Modal from \"react-modal\";\r\nimport API from \"../../utils/API\";\r\nimport UserContext from \"../../utils/UserContext\";\r\nimport CharData from \"../../utils/SmashCharacters.json\";\r\nimport \"./createIronMan.css\";\r\n\r\nfunction CreateIronMan(props) {\r\n\r\n    const { name, portrait, LobbyCode } = useContext(UserContext);\r\n\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    const modalToggle = () => {\r\n        if (modalIsOpen === true) {\r\n            setModalIsOpen(false);\r\n        }\r\n        else {\r\n            setModalIsOpen(true);\r\n        }\r\n    }\r\n\r\n    const customStyles = {\r\n        content: {\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            right: \"auto\",\r\n            bottom: \"auto\",\r\n            marginRight: \"-50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            background: \"rgb(189, 189, 189)\"\r\n        }\r\n    };\r\n\r\n    const [arenaState, setArenaState] = useState({\r\n        brawlers: \"\",\r\n    });\r\n\r\n    const launchArena = () => {\r\n        const lobbyCode = Date.now().toString().substring(Date.now().toString().length - 6)\r\n        const roster = (brawlers) => {\r\n            const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\r\n                \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\r\n                \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\",\r\n                \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\",\r\n                \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"];\r\n            const array = [];\r\n            for (let i = 0; i < brawlers; i++) {\r\n                const ranNum = Math.floor(Math.random() * (71 - i));\r\n                array.push(numbers[ranNum]);\r\n                numbers.splice(ranNum, 1);\r\n            }\r\n            return array;\r\n        }\r\n        const squadIds = roster(arenaState.brawlers);\r\n        const squad = squadIds.map(squadId => CharData.characters.find(character => character.id === squadId));\r\n        const arenaData = {\r\n            brawlers: arenaState.brawlers,\r\n            lobbyCode: lobbyCode.substring(lobbyCode.length - 6),\r\n            participants: { name: name, portrait: portrait, squad: squad, wins: 0 }\r\n        }\r\n        API.saveArena(arenaData, lobbyCode)\r\n            .then(async (res) => {\r\n                try {\r\n                    await props.updateContext(res.data.lobbyCode, res.data.participants, res.data.brawlers)\r\n                }\r\n                catch (err) {\r\n                    throw err\r\n                }\r\n            });\r\n    }\r\n    useEffect(() => {\r\n        if (LobbyCode.length === 6) {\r\n            history.push(\"/arena/\" + LobbyCode)\r\n        }\r\n    }, [LobbyCode]);\r\n\r\n    const handleInputChange = (event) => {\r\n            setArenaState({ ...arenaState, brawlers: event.target.value })\r\n        \r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col sm={12} md={12}>\r\n                    <div id=\"createIronMan\">\r\n                        <h1>Create</h1>\r\n                        <h4 id=\"createText\">Create An Iron Man Arena For Others To Join And Set The Team Size</h4>\r\n                        <Modal\r\n                            isOpen={modalIsOpen}\r\n                            style={customStyles}\r\n                            contentLabel=\"Modal\">\r\n                            <button\r\n                                onClick={modalToggle}>Close\r\n                            </button>\r\n                            <br />\r\n                            <br />\r\n                            <h2>Create Your Arena</h2>\r\n                            <br />\r\n                            <h3>How Many Brawlers on a Squad?</h3>\r\n                            <input\r\n                                id=\"brawlwers\"\r\n                                type=\"number\"\r\n                                min=\"2\"\r\n                                onChange={handleInputChange}\r\n                                required />\r\n                            <br />\r\n                            <br />\r\n                            <button\r\n                                onClick={launchArena}\r\n                            >Go Smashing</button>\r\n                        </Modal>\r\n                        <button className=\"createButton\" onClick={modalToggle}>Smash Time</button>\r\n                    </div >\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CreateIronMan;","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\FavCharStats\\favCharStats.jsx",[],"C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\pages\\Arena\\arena.jsx",["67"],"import { React, useEffect, useState } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport SquadMaker from \"../../components/SquadMaker/squadMaker\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./arena.css\";\r\n\r\nfunction Arena() {\r\n    const lobbyCode = window.location.pathname.substr(-6);\r\n    const [arenaData, setArenaData] = useState();\r\n\r\n    const leaveArena = () => {\r\n        window.open(\"http://localhost:3000/dashboard\",\"_self\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        API.getArenaByLobbyCode(lobbyCode)\r\n            .then((res) => {\r\n                setArenaData({\r\n                    LobbyCode: res.data.lobbyCode,\r\n                    brawlers: res.data.brawlers,\r\n                    participants: res.data.participants.length\r\n                })\r\n            })\r\n    }, []);\r\n    if (arenaData !== undefined) {\r\n        return (\r\n            <Container id=\"arena\" fluid>\r\n                <Row id=\"header\">\r\n                    <Col sm={12} md={5}>\r\n                        <h1 id=\"header1\">Welcome to Smash Town</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={5}>\r\n                        <h1 id=\"header2\">Population: {arenaData.participants}</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={2}>\r\n                        <button\r\n                        id=\"leaveButton\"\r\n                        onClick={leaveArena}\r\n                        >Leave Arena</button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"smallHeaders\" sm={12} md={12}>\r\n                        <h4>Lobby Code: {arenaData.LobbyCode}</h4>\r\n                    </Col>\r\n                    <Col className=\"smallHeaders\" sm={12} md={12}>\r\n                        <h4>{arenaData.brawlers} Man Iron Man</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row id=\"rosterWindow\">\r\n                    <SquadMaker />\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Arena;","C:\\Users\\vince\\Desktop\\smash-ultimatum\\smash\\client\\src\\components\\SquadMaker\\squadMaker.jsx",["68"],"import { React, useEffect, useState } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./squadMaker.css\";\r\n\r\nfunction SquadMaker() {\r\n    const lobbyCode = window.location.pathname.substr(-6);\r\n    const [participants, setParticipants] = useState([]);\r\n    const [arenaData, setArenaData] = useState({});\r\n\r\n    useEffect(() => {\r\n        API.getArenaByLobbyCode(lobbyCode)\r\n            .then((res) => {\r\n                setParticipants(...participants, res.data.participants);\r\n                setArenaData({\r\n                    brawlers: res.data.brawlers,\r\n                    lobbyCode: res.data.lobbyCode,\r\n                    participants: res.data.participants,\r\n                });\r\n            })\r\n    }, []);\r\n\r\n    // const updateCheck = () => {\r\n    //     API.getArenaByLobbyCode(lobbyCode)\r\n    //         .then((res) => {\r\n    //             if (arenaData.participants !== undefined && arenaData.participants !== res.data.participants ) {\r\n    //                 console.log(\"different\")\r\n    //                 console.log(res.data.participants, \"res.data\");\r\n    //                 console.log(arenaData.participants, \"arenadata\");\r\n    //                 clearInterval(myInterval);\r\n    //             }\r\n    //             else {\r\n    //                 console.log(\"no change\")\r\n    //                 console.log(res.data.participants,\"res.data\");\r\n    //                 console.log(arenaData.participants, \"arenadata\");\r\n    //                 clearInterval(myInterval);\r\n    //             }\r\n    //         })\r\n    // }\r\n    // const myInterval = setInterval(updateCheck, 5000);\r\n\r\n    const arenaUpdate = (event) => {\r\n        const participantName = event.target.attributes.name.value;\r\n        const participantData = participants.find(participant => participant.name === participantName);\r\n        const participantSquad = participantData.squad\r\n        if (participantData.wins !== participantData.squad.length -1) {\r\n            for (let i = 0; i < participantData.wins + 1; i++) {\r\n                participantSquad[i].didWin = true;\r\n            }\r\n            if (participantSquad[participantData.squad.length - 1].hidden === true) {\r\n                for (let i = 0; i < participantData.wins + 2; i++) {\r\n                    participantSquad[i].hidden = false;\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            participantSquad[participantSquad.length - 1].didWin = true;\r\n            participants.forEach(participant => {\r\n                API.getUserByName(participant.name)\r\n                .then((res) => {\r\n                    if(res.data.name === participantName){\r\n                        const newData = {\r\n                            name:res.data.name,\r\n                            portrait:res.data.portrait,\r\n                            userId:res.data.userId,\r\n                            ironManStats:{wins:res.data.ironManStats.wins + 1, losses:res.data.ironManStats.losses},\r\n                            tourneyStats:{...res.data.tourneyStats}\r\n                        }\r\n                        API.updateUserByName(res.data.name, newData);\r\n                    }\r\n                    else{\r\n                        const newData = {\r\n                            name:res.data.name,\r\n                            portrait:res.data.portrait,\r\n                            userId:res.data.userId,\r\n                            ironManStats:{wins:res.data.ironManStats.wins, losses:res.data.ironManStats.losses + 1},\r\n                            tourneyStats:{...res.data.tourneyStats}\r\n                        }\r\n                        API.updateUserByName(res.data.name, newData);\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        const index = participants.findIndex(participant => participant.name === participantName);\r\n        participants[index] = participantData;\r\n        arenaData.participants[index].wins++;\r\n        setArenaData({ ...arenaData, participants: participants });\r\n        API.updateArena(lobbyCode, arenaData);\r\n    }\r\n\r\n    if (participants !== undefined) {\r\n        return (\r\n            <Container fluid>\r\n                {participants.map((participant) => {\r\n                    return (\r\n                        <Row id=\"roster\">\r\n                            <Row>\r\n                                <Col sm={1} md={1}>\r\n                                    <button name={participant.name} onClick={arenaUpdate} id=\"victoryButton\" >Victorious</button>\r\n                                </Col>\r\n                                <Col id=\"userHeader\" sm={10} md={10}>\r\n                                    <img id=\"userPortrait\" src={participant.portrait} alt=\"participants portrait\" />\r\n                                    <h3 id=\"userName\">{participant.name}'s Roster</h3>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col id=\"characterList\" sm={12} md={12} >\r\n                                    {participant.squad.map(character => {\r\n                                        if (character.hidden === true && character !== participant.squad[0]) {\r\n                                            return (\r\n                                                <div className=\"hiddenContainer\">\r\n                                                    <div className=\"hidden\" />\r\n                                                    <p>???</p>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        else {\r\n                                            return (\r\n                                                <div className=\"character\">\r\n                                                    <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\r\n                                                    <p id=\"characterName\">{character.name}</p>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    })}\r\n                                </Col>\r\n                            </Row>\r\n                        </Row>\r\n                    )\r\n                })}\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return <></>\r\n    }\r\n}\r\n\r\n\r\nexport default SquadMaker;",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":52,"column":6,"nodeType":"75","endLine":52,"endColumn":8,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":80,"column":8,"nodeType":"75","endLine":80,"endColumn":19,"suggestions":"78"},{"ruleId":"73","severity":1,"message":"79","line":24,"column":8,"nodeType":"75","endLine":24,"endColumn":10,"suggestions":"80"},{"ruleId":"73","severity":1,"message":"81","line":21,"column":8,"nodeType":"75","endLine":21,"endColumn":10,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userState'. Either include it or remove the dependency array. You can also do a functional update 'setUserState(u => ...)' if you only need 'userState' in the 'setUserState' call.","ArrayExpression",["85"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["86"],"React Hook useEffect has a missing dependency: 'lobbyCode'. Either include it or remove the dependency array.",["87"],"React Hook useEffect has missing dependencies: 'lobbyCode' and 'participants'. Either include them or remove the dependency array. You can also do a functional update 'setParticipants(p => ...)' if you only need 'participants' in the 'setParticipants' call.",["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [userState]",{"range":"97","text":"98"},"Update the dependencies array to be: [LobbyCode, history]",{"range":"99","text":"100"},"Update the dependencies array to be: [lobbyCode]",{"range":"101","text":"102"},"Update the dependencies array to be: [lobbyCode, participants]",{"range":"103","text":"104"},[1264,1266],"[userState]",[3018,3029],"[LobbyCode, history]",[814,816],"[lobbyCode]",[781,783],"[lobbyCode, participants]"]