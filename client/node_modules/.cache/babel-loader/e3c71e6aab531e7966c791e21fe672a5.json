{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vince\\\\Desktop\\\\smash-ultimatum\\\\smash\\\\client\\\\src\\\\components\\\\CreateIronMan\\\\createIronMan.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./createIronMan.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CreateIronMan(props) {\n  _s();\n\n  // variables holding currently logged in user data\n  const {\n    name,\n    portrait,\n    LobbyCode\n  } = useContext(UserContext); // variable for whether the modal should be displayed\n\n  const [modalIsOpen, setModalIsOpen] = useState(false); // for routing to arena page after creating arena\n\n  const history = useHistory(); // function for changing modal display status\n\n  const modalToggle = () => {\n    if (modalIsOpen === true) {\n      setModalIsOpen(false);\n    } else {\n      setModalIsOpen(true);\n    }\n  }; // css tweaks of modal\n\n\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n      background: \"rgb(189, 189, 189)\"\n    }\n  }; // state to hold team size which is changed on input change in modal\n\n  const [arenaState, setArenaState] = useState({\n    brawlers: \"\"\n  }); // function that is run when create arena button is clicked\n\n  const launchArena = () => {\n    const lobbyCode = Date.now().toString().substring(Date.now().toString().length - 6); // function that generates an array of random numbers 1-72 with no repeats the length of arena team size\n\n    const roster = brawlers => {\n      const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"];\n      const array = [];\n\n      for (let i = 0; i < brawlers; i++) {\n        const ranNum = Math.floor(Math.random() * (71 - i));\n        array.push(numbers[ranNum]);\n        numbers.splice(ranNum, 1);\n      }\n\n      return array;\n    }; // assigning array of random numbers to the variable squadIds\n\n\n    const squadIds = roster(arenaState.brawlers); // inserting the actual character data for each individual Id \n\n    const squad = squadIds.map(squadId => CharData.characters.find(character => character.id === squadId)); // arena object that will be used to create the arena\n\n    const arenaData = {\n      brawlers: arenaState.brawlers,\n      lobbyCode: lobbyCode.substring(lobbyCode.length - 6),\n      participants: {\n        name: name,\n        portrait: portrait,\n        squad: squad,\n        wins: 0,\n        currCharacter: squad[0].name\n      },\n      admin: name\n    }; // saving the arena to the database\n\n    API.saveArena(arenaData, lobbyCode).then(async res => {\n      try {\n        await props.updateContext(res.data.lobbyCode, res.data.participants, res.data.brawlers);\n      } catch (err) {\n        throw err;\n      }\n    });\n  }; // once the lobby Code is changed reroute to the arena page\n\n\n  useEffect(() => {\n    if (LobbyCode.length === 6) {\n      history.push(\"/arena/\" + LobbyCode);\n    }\n  }, [LobbyCode]); // function run everytime there is an input change on the input bar in modal\n\n  const handleInputChange = event => {\n    setArenaState({ ...arenaState,\n      brawlers: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        md: 12,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"createIronMan\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            id: \"createText\",\n            children: \"Create An Iron Man Arena For Others To Join And Set The Team Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            isOpen: modalIsOpen,\n            style: customStyles,\n            contentLabel: \"Modal\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: modalToggle,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Create Your Arena\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"How Many Brawlers on a Squad?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"brawlwers\",\n              type: \"number\",\n              min: \"2\",\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: launchArena,\n              children: \"Go Smashing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"createButton\",\n            onClick: modalToggle,\n            children: \"Smash Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateIronMan, \"857qrcYJn24/aJy62NgVpbXOMt8=\", false, function () {\n  return [useHistory];\n});\n\n_c = CreateIronMan;\nexport default CreateIronMan;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateIronMan\");","map":{"version":3,"sources":["C:/Users/vince/Desktop/smash-ultimatum/smash/client/src/components/CreateIronMan/createIronMan.jsx"],"names":["React","useState","useContext","useEffect","useHistory","Container","Row","Col","Modal","API","UserContext","CharData","CreateIronMan","props","name","portrait","LobbyCode","modalIsOpen","setModalIsOpen","history","modalToggle","customStyles","content","top","left","right","bottom","marginRight","transform","background","arenaState","setArenaState","brawlers","launchArena","lobbyCode","Date","now","toString","substring","length","roster","numbers","array","i","ranNum","Math","floor","random","push","splice","squadIds","squad","map","squadId","characters","find","character","id","arenaData","participants","wins","currCharacter","admin","saveArena","then","res","updateContext","data","err","handleInputChange","event","target","value"],"mappings":"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","sourcesContent":["import { React, useState, useContext, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./createIronMan.css\";\n\nfunction CreateIronMan(props) {\n    // variables holding currently logged in user data\n    const { name, portrait, LobbyCode } = useContext(UserContext);\n    // variable for whether the modal should be displayed\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    // for routing to arena page after creating arena\n    const history = useHistory();\n    // function for changing modal display status\n    const modalToggle = () => {\n        if (modalIsOpen === true) {\n            setModalIsOpen(false);\n        }\n        else {\n            setModalIsOpen(true);\n        }\n    }\n    // css tweaks of modal\n    const customStyles = {\n        content: {\n            top: \"50%\",\n            left: \"50%\",\n            right: \"auto\",\n            bottom: \"auto\",\n            marginRight: \"-50%\",\n            transform: \"translate(-50%, -50%)\",\n            background: \"rgb(189, 189, 189)\"\n        }\n    };\n    // state to hold team size which is changed on input change in modal\n    const [arenaState, setArenaState] = useState({\n        brawlers: \"\",\n    });\n    // function that is run when create arena button is clicked\n    const launchArena = () => {\n        const lobbyCode = Date.now().toString().substring(Date.now().toString().length - 6)\n        // function that generates an array of random numbers 1-72 with no repeats the length of arena team size\n        const roster = (brawlers) => {\n            const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n                \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n                \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\",\n                \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\",\n                \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"];\n            const array = [];\n            for (let i = 0; i < brawlers; i++) {\n                const ranNum = Math.floor(Math.random() * (71 - i));\n                array.push(numbers[ranNum]);\n                numbers.splice(ranNum, 1);\n            }\n            return array;\n        }\n        // assigning array of random numbers to the variable squadIds\n        const squadIds = roster(arenaState.brawlers);\n        // inserting the actual character data for each individual Id \n        const squad = squadIds.map(squadId => CharData.characters.find(character => character.id === squadId));\n        // arena object that will be used to create the arena\n        const arenaData = {\n            brawlers: arenaState.brawlers,\n            lobbyCode: lobbyCode.substring(lobbyCode.length - 6),\n            participants: { name: name, portrait: portrait, squad: squad, wins: 0, currCharacter:squad[0].name },\n            admin:name\n        }\n        // saving the arena to the database\n        API.saveArena(arenaData, lobbyCode)\n            .then(async (res) => {\n                try {\n                    await props.updateContext(res.data.lobbyCode, res.data.participants, res.data.brawlers)\n                }\n                catch (err) {\n                    throw err\n                }\n            });\n    }\n\n    // once the lobby Code is changed reroute to the arena page\n    useEffect(() => {\n        if (LobbyCode.length === 6) {\n            history.push(\"/arena/\" + LobbyCode);\n        }\n    }, [LobbyCode]);\n\n    // function run everytime there is an input change on the input bar in modal\n    const handleInputChange = (event) => {\n            setArenaState({ ...arenaState, brawlers: event.target.value })\n        \n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col sm={12} md={12}>\n                    <div id=\"createIronMan\">\n                        <h1>Create</h1>\n                        <h4 id=\"createText\">Create An Iron Man Arena For Others To Join And Set The Team Size</h4>\n                        <Modal\n                            isOpen={modalIsOpen}\n                            style={customStyles}\n                            contentLabel=\"Modal\">\n                            <button\n                                onClick={modalToggle}>Close\n                            </button>\n                            <br />\n                            <br />\n                            <h2>Create Your Arena</h2>\n                            <br />\n                            <h3>How Many Brawlers on a Squad?</h3>\n                            <input\n                                id=\"brawlwers\"\n                                type=\"number\"\n                                min=\"2\"\n                                onChange={handleInputChange}\n                                required />\n                            <br />\n                            <br />\n                            <button\n                                onClick={launchArena}\n                            >Go Smashing</button>\n                        </Modal>\n                        <button className=\"createButton\" onClick={modalToggle}>Smash Time</button>\n                    </div >\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default CreateIronMan;"]},"metadata":{},"sourceType":"module"}