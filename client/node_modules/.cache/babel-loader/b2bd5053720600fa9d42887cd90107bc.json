{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vince\\\\Desktop\\\\smash-ultimatum\\\\client\\\\src\\\\components\\\\JoinIronMan\\\\joinIronMan.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./joinIronMan.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction IronMan() {\n  _s();\n\n  // state used to set arena code that will be used to reroute to the correct arena \n  const [LobbyCode, setLobbyCode] = useState(\"\"); // user data which is used to add user to the arena\n\n  const {\n    name,\n    portrait\n  } = useContext(UserContext); // for rerouting capabilities\n\n  const history = useHistory(); // for live updating of arena code on input change\n\n  const handleInputChange = event => {\n    setLobbyCode(event.target.value);\n  }; // function that generates an array of random numbers 1-72 with no repeats the length of arena team size\n\n\n  const roster = brawlers => {\n    const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"];\n    const array = [];\n\n    for (let i = 0; i < brawlers; i++) {\n      const ranNum = Math.floor(Math.random() * (71 - i));\n      array.push(numbers[ranNum]);\n      numbers.splice(ranNum, 1);\n    }\n\n    return array;\n  }; // function that is ran when join button is clicked\n\n\n  const joinArena = () => {\n    // finds the arena with the lobbycode\n    API.getArenaByLobbyCode(LobbyCode).then(res => {\n      // if the arena was found\n      if (res.data !== null) {\n        // if this user is already a participant in that arena reroute to the arena page\n        if (res.data.participants.findIndex(participant => participant.name === name) !== -1) {\n          history.push(\"/arena/\" + LobbyCode);\n          return;\n        } // if user is not a participant generate them a team and update the arena with this participant\n        else {\n          const squadIds = roster(res.data.brawlers);\n          const squad = squadIds.map(squadId => CharData.characters.find(character => character.id === squadId));\n          const newArenaData = {\n            brawlers: res.data.brawlers,\n            lobbyCode: res.data.lobbyCode,\n            participants: [...res.data.participants, {\n              name: name,\n              portrait: portrait,\n              squad: squad,\n              wins: 0,\n              currCharacter: squad[0].name\n            }]\n          }; // updating the arena in database then rerouting to arena page\n\n          API.addArenaParticipant(LobbyCode, newArenaData).then(res => {\n            history.push(\"/arena/\" + LobbyCode);\n          });\n        }\n      } // if arena was not found alert arena not found\n      else {\n        alert(\"Arena Not Found!\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    id: \"joinContent\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        md: 12,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Join\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            id: \"joinText\",\n            children: \"Join An Iron Man Arena By Entering The Arena's Lobby Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleInputChange,\n            placeholder: \"Lobby Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"joinButton\",\n            onClick: joinArena,\n            children: \"Join\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(IronMan, \"qHb4nn8V6yNzNFw/7Jo4qFAlOgg=\", false, function () {\n  return [useHistory];\n});\n\n_c = IronMan;\nexport default IronMan;\n\nvar _c;\n\n$RefreshReg$(_c, \"IronMan\");","map":{"version":3,"sources":["C:/Users/vince/Desktop/smash-ultimatum/client/src/components/JoinIronMan/joinIronMan.jsx"],"names":["React","useState","useContext","useHistory","Container","Col","Row","API","UserContext","CharData","IronMan","LobbyCode","setLobbyCode","name","portrait","history","handleInputChange","event","target","value","roster","brawlers","numbers","array","i","ranNum","Math","floor","random","push","splice","joinArena","getArenaByLobbyCode","then","res","data","participants","findIndex","participant","squadIds","squad","map","squadId","characters","find","character","id","newArenaData","lobbyCode","wins","currCharacter","addArenaParticipant","alert"],"mappings":"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","sourcesContent":["import { React, useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./joinIronMan.css\";\n\nfunction IronMan() {\n    // state used to set arena code that will be used to reroute to the correct arena \n    const [LobbyCode, setLobbyCode] = useState(\"\");\n    // user data which is used to add user to the arena\n    const { name, portrait } = useContext(UserContext);\n    // for rerouting capabilities\n    const history = useHistory();\n    // for live updating of arena code on input change\n    const handleInputChange = (event) => {\n        setLobbyCode(event.target.value);\n    }\n    // function that generates an array of random numbers 1-72 with no repeats the length of arena team size\n    const roster = (brawlers) => {\n        const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n            \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n            \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\",\n            \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\",\n            \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"];\n        const array = [];\n        for (let i = 0; i < brawlers; i++) {\n            const ranNum = Math.floor(Math.random() * (71 - i));\n            array.push(numbers[ranNum]);\n            numbers.splice(ranNum, 1);\n        }\n        return array;\n    }\n    // function that is ran when join button is clicked\n    const joinArena = () => {\n        // finds the arena with the lobbycode\n        API.getArenaByLobbyCode(LobbyCode)\n            .then((res) => {\n                // if the arena was found\n                if (res.data !== null) {\n                    // if this user is already a participant in that arena reroute to the arena page\n                    if (res.data.participants.findIndex(participant => participant.name === name) !== -1) {\n                        history.push(\"/arena/\" + LobbyCode);\n                        return;\n                    }\n                    // if user is not a participant generate them a team and update the arena with this participant\n                    else {\n                        const squadIds = roster(res.data.brawlers);\n                        const squad = squadIds.map(squadId => CharData.characters.find(character => character.id === squadId));\n                        const newArenaData = {\n                            brawlers: res.data.brawlers,\n                            lobbyCode: res.data.lobbyCode,\n                            participants: [...res.data.participants, { name: name, portrait: portrait, squad: squad, wins: 0, currCharacter: squad[0].name }]\n                        }\n                        // updating the arena in database then rerouting to arena page\n                        API.addArenaParticipant(LobbyCode, newArenaData)\n                            .then((res) => {\n                                history.push(\"/arena/\" + LobbyCode)\n                            })\n                    }\n                }\n                // if arena was not found alert arena not found\n                else {\n                    alert(\"Arena Not Found!\")\n                }\n\n            })\n    }\n\n    return (\n        <Container id=\"joinContent\">\n            <Row>\n                <Col sm={12} md={12}>\n                    <div>\n                        <h1>Join</h1>\n                        <h4 id=\"joinText\">Join An Iron Man Arena By Entering The Arena's Lobby Code</h4>\n                        <input onChange={handleInputChange} placeholder=\"Lobby Code\" />\n                        <br />\n                        <button id=\"joinButton\" onClick={joinArena}>Join</button>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default IronMan;"]},"metadata":{},"sourceType":"module"}