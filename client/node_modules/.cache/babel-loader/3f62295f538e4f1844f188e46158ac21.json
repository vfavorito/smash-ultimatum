{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vince\\\\Desktop\\\\smash-ultimatum\\\\client\\\\src\\\\components\\\\SquadMaker\\\\squadMaker.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useContext } from \"react\";\nimport UserContext from \"../../utils/UserContext\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./squadMaker.css\"; // the big daddy function that does all the arena page magic\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SquadMaker() {\n  _s();\n\n  // getting this arenas lobbyCode\n  const lobbyCode = window.location.pathname.substr(-6); // getting currently logged in users name\n\n  const {\n    name\n  } = useContext(UserContext); // array of all participants currently in this arena\n\n  const [participants, setParticipants] = useState([]); // entire arena object from database\n\n  const [arenaData, setArenaData] = useState({}); // winner object updated when conditions have been met\n\n  const [winner, setWinner] = useState({\n    name: \"\",\n    portrait: \"\"\n  }); // state of whether modal should be displayed or not\n\n  const [modalIsOpen, setModalIsOpen] = useState(false); // changing the modal display status\n\n  const modalToggle = () => {\n    setModalIsOpen(true);\n  }; // custom css tweaks of modal\n\n\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n      background: \"rgb(189, 189, 189)\"\n    }\n  }; // reroute to dashboard after clicking exit arena button\n\n  const exitArena = () => {\n    window.open(\"http://localhost:3000/dashboard\", \"_self\");\n  }; // starts grabbing the arena database object every 4 seconds and updates the arena data on the front end\n\n\n  useEffect(() => {\n    let myInterval = setInterval(() => {\n      API.getArenaByLobbyCode(lobbyCode).then(res => {\n        setParticipants(res.data.participants);\n        setArenaData({\n          brawlers: res.data.brawlers,\n          lobbyCode: res.data.lobbyCode,\n          participants: res.data.participants,\n          admin: res.data.admin\n        });\n      });\n    }, 4000);\n    return () => {\n      clearInterval(myInterval);\n    };\n  }, []); // every time the arena data is updated on the front end check to see if there is a winner yet if there is display modal\n\n  useEffect(() => {\n    participants.forEach(participant => {\n      if (parseInt(participant.wins) === parseInt(arenaData.brawlers)) {\n        setWinner({ ...winner,\n          name: participant.name,\n          portrait: participant.portrait\n        });\n        modalToggle();\n      }\n    });\n  }, [arenaData]); // magic function that is triggerd everytime the victorious button is clicked\n\n  const updater = event => {\n    // whoever was victorious assign that participants data to variables\n    const participantName = event.target.attributes.name.value;\n    const participantData = participants.find(participant => participant.name === participantName);\n    const participantSquad = participantData.squad; // for every participant in the arena get their user object from the database\n\n    participants.forEach(participant => {\n      const winningCharacter = participant.currCharacter; //grabbing the users object from database\n\n      API.getUserByName(participant.name).then(async res => {\n        try {\n          // if this participant was the victorious one find the charcter they were victorious with\n          // in their user document from database and add one to their wins value\n          if (res.data.name === participantName) {\n            await res.data.characterStats.forEach(character => {\n              if (character.name === winningCharacter) {\n                character.wins = character.wins + 1;\n              }\n\n              ;\n            });\n            const newUserData = {\n              characterStats: res.data.characterStats\n            }; // update the winners user document in database with the +1 win on that character\n\n            API.updateUserByName(res.data.name, newUserData);\n          } // for the non victorious participants\n          else {\n            // find the character they lost with in the users database document and add one loss to their loss value\n            await res.data.characterStats.forEach(character => {\n              if (character.name === participant.currCharacter) {\n                character.losses = character.losses + 1;\n              }\n\n              ;\n            });\n            const newUserData = {\n              characterStats: res.data.characterStats\n            }; //updating the losers user document in database with +1 loss on their character\n\n            API.updateUserByName(res.data.name, newUserData);\n          }\n        } catch (err) {\n          throw err;\n        }\n      });\n    }); // setting participants wins and what characters should be hidden if their is not a winner yet\n\n    if (participantData.wins + 1 !== participantData.squad.length) {\n      for (let i = 0; i < participantData.wins + 1; i++) {\n        participantSquad[i].didWin = true;\n      }\n\n      if (participantSquad[participantData.squad.length - 1].hidden === true) {\n        for (let i = 0; i < participantData.wins + 2; i++) {\n          participantSquad[i].hidden = false;\n          const index = participants.findIndex(participant => participant.name === participantName);\n          arenaData.participants[index].currCharacter = participantSquad.find(character => character.didWin === false).name;\n        }\n      }\n    } // if their is a winner update the users documents in the database\n    else {\n      participantSquad[participantSquad.length - 1].didWin = true;\n      participants.forEach(participant => {\n        // getting the user document from database\n        API.getUserByName(participant.name).then(res => {\n          // if this user was the winner add a win to their user document and update in database\n          if (res.data.name === participantName) {\n            const newData = {\n              ironManStats: {\n                wins: res.data.ironManStats.wins + 1,\n                losses: res.data.ironManStats.losses\n              }\n            };\n            API.updateUserByName(res.data.name, newData);\n          } // if the user was not the winner add a loss to their user document and update in database\n          else {\n            const newData = {\n              ironManStats: {\n                wins: res.data.ironManStats.wins,\n                losses: res.data.ironManStats.losses + 1\n              }\n            };\n            API.updateUserByName(res.data.name, newData);\n          } // setting the winner state and telling the winner modal to display\n\n\n          setWinner({ ...winner,\n            name: participantData.name,\n            portrait: participantData.portrait\n          });\n          modalToggle();\n        });\n      });\n    } // finding the victorios participant in participants array\n\n\n    const index = participants.findIndex(participant => participant.name === participantName);\n    participants[index] = participantData; // adding a win to the winning participant\n\n    arenaData.participants[index].wins++; // updating the arena with the winning participants data \n\n    setArenaData({ ...arenaData,\n      participants: participants\n    });\n    API.updateArena(lobbyCode, arenaData);\n  }; // if participants have been set\n\n\n  if (participants !== undefined) {\n    // if the user has admin status meaning they created the arena display the rosters with the victorious buttons\n    if (name === arenaData.admin) {\n      return /*#__PURE__*/_jsxDEV(Container, {\n        fluid: true,\n        children: participants.map(participant => {\n          return /*#__PURE__*/_jsxDEV(Row, {\n            id: \"roster\",\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                sm: 1,\n                md: 1,\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  name: participant.name,\n                  onClick: updater,\n                  id: \"victoryButton\",\n                  children: \"Victorious\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                id: \"userHeader\",\n                sm: 10,\n                md: 10,\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  id: \"userPortrait\",\n                  src: participant.portrait,\n                  alt: \"participants portrait\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  id: \"userName\",\n                  children: [participant.name, \"'s Roster\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                id: \"characterList\",\n                sm: 12,\n                md: 12,\n                children: [participant.squad.map(character => {\n                  if (character.hidden === true && character !== participant.squad[0]) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"hiddenContainer\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"hidden\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 193,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: \"???\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 194,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 192,\n                      columnNumber: 53\n                    }, this);\n                  } else {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"character\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        id: \"characterPortrait\",\n                        src: character.portrait,\n                        alt: \"characters portrait\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 201,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        id: \"characterName\",\n                        children: character.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 202,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 200,\n                      columnNumber: 53\n                    }, this);\n                  }\n                }), /*#__PURE__*/_jsxDEV(Modal, {\n                  isOpen: modalIsOpen,\n                  style: customStyles,\n                  contentLabel: \"Modal\",\n                  id: \"winnerModal\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                    children: \"Congratulations!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 212,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: [\" \", winner.name, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                    alt: \"winner portrait\",\n                    src: winner.portrait,\n                    id: \"winnerPortrait\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 216,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 217,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 218,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: \" You Are The Smash King\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 219,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: exitArena,\n                    children: \"Exit Arena\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this);\n    } // if the user has joined the arena but does not have admin status display the rosters without the victorious buttons\n    else {\n      return /*#__PURE__*/_jsxDEV(Container, {\n        fluid: true,\n        children: participants.map(participant => {\n          return /*#__PURE__*/_jsxDEV(Row, {\n            id: \"roster\",\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                id: \"userHeader\",\n                sm: 12,\n                md: 12,\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  id: \"userPortrait\",\n                  src: participant.portrait,\n                  alt: \"participants portrait\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  id: \"userName\",\n                  children: [participant.name, \"'s Roster\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                id: \"characterList\",\n                sm: 12,\n                md: 12,\n                children: [participant.squad.map(character => {\n                  if (character.hidden === true && character !== participant.squad[0]) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"hiddenContainer\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"hidden\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 253,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: \"???\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 254,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 252,\n                      columnNumber: 53\n                    }, this);\n                  } else {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"character\",\n                      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                        id: \"characterPortrait\",\n                        src: character.portrait,\n                        alt: \"characters portrait\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 261,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        id: \"characterName\",\n                        children: character.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 262,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 260,\n                      columnNumber: 53\n                    }, this);\n                  }\n                }), /*#__PURE__*/_jsxDEV(Modal, {\n                  isOpen: modalIsOpen,\n                  style: customStyles,\n                  contentLabel: \"Modal\",\n                  id: \"winnerModal\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                    children: \"Congratulations!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 273,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: [\" \", winner.name, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                    alt: \"winner portrait\",\n                    src: winner.portrait,\n                    id: \"winnerPortrait\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 277,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: \" You Are The Smash King\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 279,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: exitArena,\n                    children: \"Exit Arena\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this);\n    }\n\n    ;\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n}\n\n_s(SquadMaker, \"2ux+ZZXSYjGebPYLBPbgpCTIcTw=\");\n\n_c = SquadMaker;\nexport default SquadMaker;\n\nvar _c;\n\n$RefreshReg$(_c, \"SquadMaker\");","map":{"version":3,"sources":["C:/Users/vince/Desktop/smash-ultimatum/client/src/components/SquadMaker/squadMaker.jsx"],"names":["React","useEffect","useState","useContext","UserContext","Modal","API","Container","Row","Col","SquadMaker","lobbyCode","window","location","pathname","substr","name","participants","setParticipants","arenaData","setArenaData","winner","setWinner","portrait","modalIsOpen","setModalIsOpen","modalToggle","customStyles","content","top","left","right","bottom","marginRight","transform","background","exitArena","open","myInterval","setInterval","getArenaByLobbyCode","then","res","data","brawlers","admin","clearInterval","forEach","participant","parseInt","wins","updater","event","participantName","target","attributes","value","participantData","find","participantSquad","squad","winningCharacter","currCharacter","getUserByName","characterStats","character","newUserData","updateUserByName","losses","err","length","i","didWin","hidden","index","findIndex","newData","ironManStats","updateArena","undefined","map"],"mappings":"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","sourcesContent":["import { React, useEffect, useState, useContext } from \"react\";\nimport UserContext from \"../../utils/UserContext\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./squadMaker.css\";\n\n// the big daddy function that does all the arena page magic\n\nfunction SquadMaker() {\n    // getting this arenas lobbyCode\n    const lobbyCode = window.location.pathname.substr(-6);\n    // getting currently logged in users name\n    const { name } = useContext(UserContext);\n    // array of all participants currently in this arena\n    const [participants, setParticipants] = useState([]);\n    // entire arena object from database\n    const [arenaData, setArenaData] = useState({});\n    // winner object updated when conditions have been met\n    const [winner, setWinner] = useState({\n        name: \"\",\n        portrait: \"\"\n    });\n    // state of whether modal should be displayed or not\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    // changing the modal display status\n    const modalToggle = () => {\n        setModalIsOpen(true);\n    };\n    // custom css tweaks of modal\n    const customStyles = {\n        content: {\n            top: \"50%\",\n            left: \"50%\",\n            right: \"auto\",\n            bottom: \"auto\",\n            marginRight: \"-50%\",\n            transform: \"translate(-50%, -50%)\",\n            background: \"rgb(189, 189, 189)\",\n        }\n    };\n    // reroute to dashboard after clicking exit arena button\n    const exitArena = () => {\n        window.open(\"http://localhost:3000/dashboard\", \"_self\");\n    }\n    // starts grabbing the arena database object every 4 seconds and updates the arena data on the front end\n    useEffect(() => {\n        let myInterval = setInterval(() => {\n            API.getArenaByLobbyCode(lobbyCode)\n                .then((res) => {\n                    setParticipants(res.data.participants)\n                    setArenaData({\n                        brawlers: res.data.brawlers,\n                        lobbyCode: res.data.lobbyCode,\n                        participants: res.data.participants,\n                        admin: res.data.admin\n                    });\n                })\n        }, 4000)\n        return () => {\n            clearInterval(myInterval)\n        };\n    }, []);\n    // every time the arena data is updated on the front end check to see if there is a winner yet if there is display modal\n    useEffect(() => {\n        participants.forEach(participant => {\n            if (parseInt(participant.wins) === parseInt(arenaData.brawlers)) {\n                setWinner({ ...winner, name: participant.name, portrait: participant.portrait })\n                modalToggle();\n            }\n        })\n    }, [arenaData])\n    // magic function that is triggerd everytime the victorious button is clicked\n    const updater = (event) => {\n        // whoever was victorious assign that participants data to variables\n        const participantName = event.target.attributes.name.value;\n        const participantData = participants.find(participant => participant.name === participantName);\n        const participantSquad = participantData.squad;\n        // for every participant in the arena get their user object from the database\n        participants.forEach((participant) => {\n            const winningCharacter = participant.currCharacter;\n            //grabbing the users object from database\n            API.getUserByName(participant.name)\n                .then(async (res) => {\n                    try {\n                        // if this participant was the victorious one find the charcter they were victorious with\n                        // in their user document from database and add one to their wins value\n                        if (res.data.name === participantName) {\n                            await res.data.characterStats.forEach(character => {\n                                if (character.name === winningCharacter) {\n                                    character.wins = character.wins + 1;\n                                };\n                            });\n                            const newUserData = {\n                                characterStats: res.data.characterStats,\n                            }\n                            // update the winners user document in database with the +1 win on that character\n                            API.updateUserByName(res.data.name, newUserData);\n                        }\n                        // for the non victorious participants\n                        else {\n                            // find the character they lost with in the users database document and add one loss to their loss value\n                            await res.data.characterStats.forEach(character => {\n                                if (character.name === participant.currCharacter) {\n                                    character.losses = character.losses + 1;\n                                };\n                            });\n                            const newUserData = {\n                                characterStats: res.data.characterStats,\n                            }\n                            //updating the losers user document in database with +1 loss on their character\n                            API.updateUserByName(res.data.name, newUserData);\n                        }\n                    }\n                    catch (err) {\n                        throw err;\n                    }\n                })\n        })\n        // setting participants wins and what characters should be hidden if their is not a winner yet\n        if (participantData.wins + 1 !== participantData.squad.length) {\n            for (let i = 0; i < participantData.wins + 1; i++) {\n                participantSquad[i].didWin = true;\n            }\n            if (participantSquad[participantData.squad.length - 1].hidden === true) {\n                for (let i = 0; i < participantData.wins + 2; i++) {\n                    participantSquad[i].hidden = false;\n                    const index = participants.findIndex(participant => participant.name === participantName);\n                    arenaData.participants[index].currCharacter = participantSquad.find(character => character.didWin === false).name;\n                }\n            }\n        }\n        // if their is a winner update the users documents in the database\n        else {\n            participantSquad[participantSquad.length - 1].didWin = true;\n            participants.forEach(participant => {\n                // getting the user document from database\n                API.getUserByName(participant.name)\n                    .then((res) => {\n                        // if this user was the winner add a win to their user document and update in database\n                        if (res.data.name === participantName) {\n                            const newData = {\n                                ironManStats: { wins: res.data.ironManStats.wins + 1, losses: res.data.ironManStats.losses }\n                            };\n                            API.updateUserByName(res.data.name, newData);\n                        }\n                        // if the user was not the winner add a loss to their user document and update in database\n                        else {\n                            const newData = {\n                                ironManStats: { wins: res.data.ironManStats.wins, losses: res.data.ironManStats.losses + 1 },\n                            };\n                            API.updateUserByName(res.data.name, newData);\n                        }\n                        // setting the winner state and telling the winner modal to display\n                        setWinner({ ...winner, name: participantData.name, portrait: participantData.portrait })\n                        modalToggle();\n                    })\n            })\n        }\n        // finding the victorios participant in participants array\n        const index = participants.findIndex(participant => participant.name === participantName);\n        participants[index] = participantData;\n        // adding a win to the winning participant\n        arenaData.participants[index].wins++;\n        // updating the arena with the winning participants data \n        setArenaData({ ...arenaData, participants: participants });\n        API.updateArena(lobbyCode, arenaData);\n    }\n    // if participants have been set\n    if (participants !== undefined) {\n        // if the user has admin status meaning they created the arena display the rosters with the victorious buttons\n        if (name === arenaData.admin) {\n            return (\n                <Container fluid>\n                    {participants.map((participant) => {\n                        return (\n                            <Row id=\"roster\">\n                                <Row>\n                                    <Col sm={1} md={1}>\n                                        <button name={participant.name} onClick={updater} id=\"victoryButton\" >Victorious</button>\n                                    </Col>\n                                    <Col id=\"userHeader\" sm={10} md={10}>\n                                        <img id=\"userPortrait\" src={participant.portrait} alt=\"participants portrait\" />\n                                        <h3 id=\"userName\">{participant.name}'s Roster</h3>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col id=\"characterList\" sm={12} md={12} >\n                                        {participant.squad.map(character => {\n                                            if (character.hidden === true && character !== participant.squad[0]) {\n                                                return (\n                                                    <div className=\"hiddenContainer\">\n                                                        <div className=\"hidden\" />\n                                                        <p>???</p>\n                                                    </div>\n                                                )\n                                            }\n                                            else {\n                                                return (\n                                                    <div className=\"character\">\n                                                        <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\n                                                        <p id=\"characterName\">{character.name}</p>\n                                                    </div>\n                                                )\n                                            }\n                                        })}\n                                        <Modal\n                                            isOpen={modalIsOpen}\n                                            style={customStyles}\n                                            contentLabel=\"Modal\"\n                                            id=\"winnerModal\">\n                                            <h1>Congratulations!</h1>\n                                            <br />\n                                            <h2> {winner.name} </h2>\n                                            <br />\n                                            <img alt=\"winner portrait\" src={winner.portrait} id=\"winnerPortrait\" />\n                                            <br />\n                                            <br />\n                                            <h3> You Are The Smash King</h3>\n                                            <br />\n                                            <button\n                                                onClick={exitArena}\n                                            >Exit Arena</button>\n                                        </Modal>\n                                    </Col>\n                                </Row>\n                            </Row>\n                        )\n                    })}\n                </Container>\n\n            )\n        }\n        // if the user has joined the arena but does not have admin status display the rosters without the victorious buttons\n        else {\n            return (\n                <Container fluid>\n                    {participants.map((participant) => {\n                        return (\n                            <Row id=\"roster\">\n                                <Row>\n                                    <Col id=\"userHeader\" sm={12} md={12}>\n                                        <img id=\"userPortrait\" src={participant.portrait} alt=\"participants portrait\" />\n                                        <h3 id=\"userName\">{participant.name}'s Roster</h3>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col id=\"characterList\" sm={12} md={12} >\n                                        {participant.squad.map(character => {\n                                            if (character.hidden === true && character !== participant.squad[0]) {\n                                                return (\n                                                    <div className=\"hiddenContainer\">\n                                                        <div className=\"hidden\" />\n                                                        <p>???</p>\n                                                    </div>\n                                                )\n                                            }\n                                            else {\n                                                return (\n                                                    <div className=\"character\">\n                                                        <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\n                                                        <p id=\"characterName\">{character.name}</p>\n                                                    </div>\n                                                )\n                                            }\n                                        })}\n                                        <Modal\n                                            isOpen={modalIsOpen}\n                                            style={customStyles}\n                                            contentLabel=\"Modal\"\n                                            id=\"winnerModal\">\n                                            <h1>Congratulations!</h1>\n                                            <br />\n                                            <h2> {winner.name} </h2>\n                                            <br />\n                                            <img alt=\"winner portrait\" src={winner.portrait} id=\"winnerPortrait\" />\n                                            <br />\n                                            <br />\n                                            <h3> You Are The Smash King</h3>\n                                            <br />\n                                            <button\n                                                onClick={exitArena}\n                                            >Exit Arena</button>\n                                        </Modal>\n                                    </Col>\n                                </Row>\n                            </Row>\n                        )\n                    })}\n                </Container>\n\n            )\n        };\n    }\n    else {\n        return <></>\n    }\n}\nexport default SquadMaker;"]},"metadata":{},"sourceType":"module"}