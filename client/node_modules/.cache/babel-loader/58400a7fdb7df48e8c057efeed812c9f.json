{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vince\\\\Desktop\\\\smash-ultimatum\\\\smash\\\\client\\\\src\\\\components\\\\LeaderBoard\\\\leaderBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport { Row, Col, Table } from \"react-bootstrap\";\nimport \"./leaderBoard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LeaderBoard() {\n  _s();\n\n  // state for holding all users in database\n  const [users, setUsers] = useState([]); // grabbing all users from database and assigning them to the users state\n\n  useEffect(() => {\n    API.getAllUsers().then(res => {\n      setUsers(res.data);\n      console.log(users, \"users\");\n      console.log(res.data, \"res.data\");\n    });\n  }, []); // once the users state is set render table \n\n  if (users.length > 0) {\n    // sorting the users array by most wins to least\n    users.sort((a, b) => parseFloat(b.ironManStats.wins) - parseFloat(a.ironManStats.wins));\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        md: 12,\n        id: \"leaderBoard\",\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Portrait\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Wins\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Losses\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Win %\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: // generating table rows by mapping through the users state\n            users.map(user => {\n              const totalGames = parseInt(user.ironManStats.wins) + parseInt(user.ironManStats.losses);\n              const winPercentage = Math.round(parseInt(user.ironManStats.wins) / totalGames * 100);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                id: \"tableRow\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n                    alt: \"user portrait\",\n                    src: user.portrait,\n                    id: \"boardPortrait\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 43,\n                    columnNumber: 50\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 43,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: user.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: user.ironManStats.wins\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: user.ironManStats.losses\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [winPercentage, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n}\n\n_s(LeaderBoard, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n\n_c = LeaderBoard;\nexport default LeaderBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeaderBoard\");","map":{"version":3,"sources":["C:/Users/vince/Desktop/smash-ultimatum/smash/client/src/components/LeaderBoard/leaderBoard.jsx"],"names":["React","useState","useEffect","API","Row","Col","Table","LeaderBoard","users","setUsers","getAllUsers","then","res","data","console","log","length","sort","a","b","parseFloat","ironManStats","wins","map","user","totalGames","parseInt","losses","winPercentage","Math","round","portrait","name"],"mappings":"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","sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport { Row, Col, Table } from \"react-bootstrap\";\nimport \"./leaderBoard.css\"\n\nfunction LeaderBoard() {\n    // state for holding all users in database\n    const [users, setUsers] = useState([])\n    // grabbing all users from database and assigning them to the users state\n    useEffect(() => {\n        API.getAllUsers()\n            .then((res) => {\n                setUsers(res.data);\n                console.log(users, \"users\")\n                console.log(res.data, \"res.data\")\n            })\n    }, []);\n    // once the users state is set render table \n    if (users.length > 0) {\n        // sorting the users array by most wins to least\n        users.sort((a, b) => parseFloat(b.ironManStats.wins) - parseFloat(a.ironManStats.wins));\n        return (\n            <Row>\n                <Col sm={12} md={12} id=\"leaderBoard\">\n                    <Table striped bordered hover >\n                        <thead>\n                            <tr>\n                                <th>Portrait</th>\n                                <th>Name</th>\n                                <th>Wins</th>\n                                <th>Losses</th>\n                                <th>Win %</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                // generating table rows by mapping through the users state\n                                users.map(user => {\n                                    const totalGames = parseInt(user.ironManStats.wins) + parseInt(user.ironManStats.losses);\n                                    const winPercentage = Math.round(parseInt(user.ironManStats.wins) / totalGames * 100)\n                                    return (\n                                        <tr id=\"tableRow\">\n                                            <td> <img alt=\"user portrait\" src={user.portrait} id=\"boardPortrait\" /></td>\n                                            <td>{user.name}</td>\n                                            <td>{user.ironManStats.wins}</td>\n                                            <td>{user.ironManStats.losses}</td>\n                                            <td>{winPercentage}%</td>\n                                        </tr>\n                                    )\n                                })}\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        )\n    }\n    else {\n        return (\n            <></>\n        )\n    }\n\n}\n\nexport default LeaderBoard"]},"metadata":{},"sourceType":"module"}