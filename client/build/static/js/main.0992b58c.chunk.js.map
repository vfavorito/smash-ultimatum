{"version":3,"sources":["components/LoginWindow/loginWindow.jsx","pages/LoginScreen/loginScreen.jsx","utils/UserContext.js","utils/API.js","components/FavoriteCharacter/favoriteCharacter.jsx","components/UserStats/userStats.jsx","components/CreateIronMan/createIronMan.jsx","components/JoinIronMan/joinIronMan.jsx","components/FavCharStats/favCharStats.jsx","components/LeaderBoard/leaderBoard.jsx","components/Footer/footer.jsx","pages/MainDashboard/mainDashboard.jsx","components/SquadMaker/squadMaker.jsx","pages/Arena/arena.jsx","App.js","index.js"],"names":["LoginWindow","id","onClick","window","open","class","LoginScreen","Container","fluid","Row","Col","sm","md","UserContext","React","createContext","name","portrait","LobbyCode","participants","brawlers","API","getUserByUserId","axios","get","getUserByName","getAllUsers","saveArena","groupData","post","getArenaByLobbyCode","addArenaParticipant","participantData","put","updateArena","data","updateUserByName","FavoriteCharacter","props","className","CharData","characters","map","character","themeChanger","quote","alt","src","UserStats","useContext","useState","userStats","setUserStats","useEffect","length","then","res","ironManStats","tourneyStats","undefined","wins","losses","CreateIronMan","modalIsOpen","setModalIsOpen","history","useHistory","modalToggle","arenaState","setArenaState","push","isOpen","style","content","top","left","right","bottom","marginRight","transform","background","contentLabel","type","min","onChange","event","target","value","required","lobbyCode","Date","now","toString","substring","squad","numbers","array","i","ranNum","Math","floor","random","splice","roster","squadId","find","arenaData","currCharacter","admin","a","updateContext","IronMan","setLobbyCode","placeholder","findIndex","participant","newArenaData","alert","FavCharStats","stats","console","log","LeaderBoard","users","setUsers","sort","b","parseFloat","Table","striped","bordered","hover","user","totalGames","parseInt","winPercentage","round","Footer","MainDashboard","charState","setCharState","Tab","defaultActiveKey","Nav","variant","Item","Link","eventKey","Content","Pane","thisCharStats","characterStats","x","SquadMaker","location","pathname","substr","permanentName","useRef","current","setParticipants","setArenaData","winner","setWinner","winnerModalIsOpen","setWinnerModalIsOpen","voteModalIsOpen","setVoteModalIsOpen","roundWinner","setRoundWinner","vote","didVote","winnerModalToggle","customStyles","exitArena","myInterval","setInterval","voteTally","yays","nays","voteOpen","statusCheck","clearInterval","forEach","updater","openVote","attributes","arenaParticipants","winningParticipantName","winningParticipantData","winningParticipantSquad","index","winningCharacter","newUserData","didWin","hidden","newData","Spinner","animation","role","Arena","App","competitors","userState","setUserState","_id","catch","err","Provider","exact","path","component","Login","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0992b58c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./loginWindow.css\";\nfunction LoginWindow() {\n    // hitting the google login route\n    const googleLogin = () => {\n        window.open(\"https://smash-ultimatum.herokuapp.com/auth/google\", \"_self\");\n    }\n    return (\n        <div>\n            <button id=\"googleButton\" onClick={googleLogin}>\n                <i class=\"loginText fab \">Login with Google</i>\n                <i id=\"googleIcon\" class=\"fab fa-google\"></i>\n            </button>\n        </div>\n    )\n}\n\nexport default LoginWindow;","import React from \"react\";\nimport LoginWindow from \"../../components/LoginWindow/loginWindow\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./loginScreen.css\";\n\nfunction LoginScreen(){\n\n    return(\n        <Container fluid id=\"container\">\n            <div id=\"master\">\n            <Row>\n                <Col sm={3} md={3}></Col>\n                <Col id=\"loginBox\" sm={6} md={6}>\n                    <div id=\"content\">\n                        <h1 class=\"loginHeader\">Smash Ultimatum</h1>\n                        <LoginWindow />\n                    </div>\n                </Col>\n                <Col sm={3} md={3}></Col>\n            </Row>\n            </div>\n        </Container>\n    )\n}\n\nexport default LoginScreen;","import React from \"react\";\n// context that holds logged in user data for the front end\nconst UserContext = React.createContext({\n    id: \"\",\n    name: \"\",\n    portrait: \"\",\n    LobbyCode: \"\",\n    participants: [],\n    brawlers: \"\"\n});\n\nexport default UserContext;","import axios from \"axios\";\n\nconst API = {\n    \n    // Returns users using their initial google id, stored in user.userId\n    getUserByUserId: function (id) {\n        return axios.get(\"/api/users/userid/\" + id);\n    },\n    getUserByName: function (name) {\n        return axios.get(\"/api/users/name/\" + name);\n    },\n    getAllUsers: function () {\n        return axios.get(\"/api/users\");\n    },\n    // Saves an Arena to the database\n    saveArena: function (groupData, id) {\n        return axios.post(\"/api/arenas/\" + id, groupData);\n    },\n    //Returns an Arena's info by searching lobbyCode\n    getArenaByLobbyCode: function (id) {\n        return axios.get(\"/api/arenas/find/\" + id);\n    },\n    //adds Participant to arena\n    addArenaParticipant: function (id, participantData){\n        return axios.put(\"/api/arenas/addParticipant/\" + id, participantData)\n    },\n    // to update anything about the arena document\n    updateArena: function(id, data){\n        return axios.put(\"/api/arenas/update/\" + id, data)\n    },\n    // to update stats of user document\n    updateUserByName: function(name, data){\n        return axios.put(\"/api/users/update/\" + name, data)\n    }\n};\nexport default API;","import { React } from \"react\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./favoriteCharacter.css\";\n\nfunction FavoriteCharacter(props) {\n\n    // displays a full roster of all the characters in the charData json file and on click updates the current character selected state\n    return (\n        <div id=\"charSelectWrapper\">\n            <h2>Character Select:</h2>\n            <div className=\"charSelectContainer\" >\n                {CharData.characters.map(character => {\n                    return (\n                        <div className=\"charCard\"\n                            key={character.id}\n                            onClick={() => props.themeChanger(character.name, character.portrait, character.quote)}>\n                            <img alt={character.name}\n                                src={character.portrait}\n                                className=\"charPic\" />\n                            <p className=\"charText\">{character.name}</p>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default FavoriteCharacter;","import { React, useContext, useEffect, useState } from \"react\";\nimport UserContext from \"../../utils/UserContext\";\nimport API from \"../../utils/API\";\nimport \"./userStats.css\";\nimport { Container, Col, Row } from \"react-bootstrap\";\n\nfunction UserStats() {\n    // the logged in users data\n    const { name, portrait } = useContext(UserContext);\n    // setting up stats state that will be updated with api call\n    const [userStats, setUserStats] = useState();\n    // once name is updated get the users data from database and set it to userStats\n    useEffect(() => {\n        if (name.length > 1) {\n            API.getUserByName(name)\n                .then((res) => {\n                    setUserStats({ ironManStats: res.data.ironManStats, tourneyStats: res.data.tourneyStats })\n                });\n        }\n    }, [name]);\n    // if userStats has been updated\n    if (userStats !== undefined) {\n        return (\n            <Container id=\"userStatsContent\">\n                <Row>\n                    <Col sm={12} md={12}>\n                        <h2>{name}'s Stats</h2>\n                        <img src={portrait} alt=\"User Portrait\" id=\"userStatsPortrait\" />\n                        <h3>Iron Man Stats</h3>\n                        <h4>Wins: {userStats.ironManStats.wins}</h4>\n                        <h4>Losses: {userStats.ironManStats.losses}</h4>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n    else {\n        return (\n            <>\n            </>\n        )\n    }\n\n}\n\nexport default UserStats;","import { React, useState, useContext, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./createIronMan.css\";\n\nfunction CreateIronMan(props) {\n    // variables holding currently logged in user data\n    const { name, portrait, LobbyCode } = useContext(UserContext);\n    // variable for whether the modal should be displayed\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    // for routing to arena page after creating arena\n    const history = useHistory();\n    // function for changing modal display status\n    const modalToggle = () => {\n        if (modalIsOpen === true) {\n            setModalIsOpen(false);\n        }\n        else {\n            setModalIsOpen(true);\n        }\n    }\n    // css tweaks of modal\n    const customStyles = {\n        content: {\n            top: \"50%\",\n            left: \"50%\",\n            right: \"auto\",\n            bottom: \"auto\",\n            marginRight: \"-50%\",\n            transform: \"translate(-50%, -50%)\",\n            background: \"rgb(189, 189, 189)\"\n        }\n    };\n    // state to hold team size which is changed on input change in modal\n    const [arenaState, setArenaState] = useState({\n        brawlers: \"\",\n    });\n    // function that is run when create arena button is clicked\n    const launchArena = () => {\n        const lobbyCode = Date.now().toString().substring(Date.now().toString().length - 6)\n        // function that generates an array of random numbers 1-72 with no repeats the length of arena team size\n        const roster = (brawlers) => {\n            const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n                \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n                \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\",\n                \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\",\n                \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"];\n            const array = [];\n            for (let i = 0; i < brawlers; i++) {\n                const ranNum = Math.floor(Math.random() * (71 - i));\n                array.push(numbers[ranNum]);\n                numbers.splice(ranNum, 1);\n            }\n            return array;\n        }\n        // assigning array of random numbers to the variable squadIds\n        const squadIds = roster(arenaState.brawlers);\n        // inserting the actual character data for each individual Id \n        const squad = squadIds.map(squadId => CharData.characters.find(character => character.id === squadId));\n        // arena object that will be used to create the arena\n        const arenaData = {\n            brawlers: arenaState.brawlers,\n            lobbyCode: lobbyCode.substring(lobbyCode.length - 6),\n            participants: { name: name, portrait: portrait, squad: squad, wins: 0, currCharacter:squad[0].name },\n            admin:name\n        }\n        // saving the arena to the database\n        API.saveArena(arenaData, lobbyCode)\n            .then(async (res) => {\n                try {\n                    await props.updateContext(res.data.lobbyCode, res.data.participants, res.data.brawlers)\n                }\n                catch (err) {\n                    throw err\n                }\n            });\n    }\n\n    // once the lobby Code is changed reroute to the arena page\n    useEffect(() => {\n        if (LobbyCode.length === 6) {\n            history.push(\"/arena/\" + LobbyCode);\n        }\n    }, [LobbyCode]);\n\n    // function run everytime there is an input change on the input bar in modal\n    const handleInputChange = (event) => {\n            setArenaState({ ...arenaState, brawlers: event.target.value })\n        \n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col sm={12} md={12}>\n                    <div id=\"createIronMan\">\n                        <h1>Create</h1>\n                        <h4 id=\"createText\">Create An Iron Man Arena For Others To Join And Set The Team Size</h4>\n                        <Modal\n                            isOpen={modalIsOpen}\n                            style={customStyles}\n                            contentLabel=\"Modal\">\n                            <button\n                                onClick={modalToggle}>Close\n                            </button>\n                            <br />\n                            <br />\n                            <h2>Create Your Arena</h2>\n                            <br />\n                            <h3>How Many Brawlers on a Squad?</h3>\n                            <input\n                                id=\"brawlwers\"\n                                type=\"number\"\n                                min=\"2\"\n                                onChange={handleInputChange}\n                                required />\n                            <br />\n                            <br />\n                            <button\n                                onClick={launchArena}\n                            >Go Smashing</button>\n                        </Modal>\n                        <button className=\"createButton\" onClick={modalToggle}>Smash Time</button>\n                    </div >\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default CreateIronMan;","import { React, useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./joinIronMan.css\";\n\nfunction IronMan() {\n    // state used to set arena code that will be used to reroute to the correct arena \n    const [LobbyCode, setLobbyCode] = useState(\"\");\n    // user data which is used to add user to the arena\n    const { name, portrait } = useContext(UserContext);\n    // for rerouting capabilities\n    const history = useHistory();\n    // for live updating of arena code on input change\n    const handleInputChange = (event) => {\n        setLobbyCode(event.target.value);\n    }\n    // function that generates an array of random numbers 1-72 with no repeats the length of arena team size\n    const roster = (brawlers) => {\n        const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n            \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n            \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\",\n            \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\",\n            \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"];\n        const array = [];\n        for (let i = 0; i < brawlers; i++) {\n            const ranNum = Math.floor(Math.random() * (71 - i));\n            array.push(numbers[ranNum]);\n            numbers.splice(ranNum, 1);\n        }\n        return array;\n    }\n    // function that is ran when join button is clicked\n    const joinArena = () => {\n        // finds the arena with the lobbycode\n        API.getArenaByLobbyCode(LobbyCode)\n            .then((res) => {\n                // if the arena was found\n                if (res.data !== null) {\n                    // if this user is already a participant in that arena reroute to the arena page\n                    if (res.data.participants.findIndex(participant => participant.name === name) !== -1) {\n                        history.push(\"/arena/\" + LobbyCode);\n                        return;\n                    }\n                    // if user is not a participant generate them a team and update the arena with this participant\n                    else {\n                        const squadIds = roster(res.data.brawlers);\n                        const squad = squadIds.map(squadId => CharData.characters.find(character => character.id === squadId));\n                        const newArenaData = {\n                            brawlers: res.data.brawlers,\n                            lobbyCode: res.data.lobbyCode,\n                            participants: [...res.data.participants, { name: name, portrait: portrait, squad: squad, wins: 0, currCharacter: squad[0].name }]\n                        }\n                        // updating the arena in database then rerouting to arena page\n                        API.addArenaParticipant(LobbyCode, newArenaData)\n                            .then((res) => {\n                                history.push(\"/arena/\" + LobbyCode)\n                            })\n                    }\n                }\n                // if arena was not found alert arena not found\n                else {\n                    alert(\"Arena Not Found!\")\n                }\n\n            })\n    }\n\n    return (\n        <Container id=\"joinContent\">\n            <Row>\n                <Col sm={12} md={12}>\n                    <div>\n                        <h1>Join</h1>\n                        <h4 id=\"joinText\">Join An Iron Man Arena By Entering The Arena's Lobby Code</h4>\n                        <input onChange={handleInputChange} placeholder=\"Lobby Code\" />\n                        <br />\n                        <button id=\"joinButton\" onClick={joinArena}>Join</button>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default IronMan;","import { React } from \"react\";\nimport \"./favCharStats.css\";\n\nfunction FavCharStats(props) {\n    // component that will display if a character was selected from Favorite character component \n    if (props.stats.character.length > 1) {\n        console.log(props.stats,\"props.stats\")\n        return (\n            <div id=\"charCard\">\n                <h2 >{props.stats.quote}</h2>\n                <img id=\"charImg\" src={props.stats.portrait} alt=\"character portrait\" />\n                <h3>Wins: {props.stats.stats.wins}</h3>\n                <h3>Loses: {props.stats.stats.losses}</h3>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div />\n        )\n    }\n}\nexport default FavCharStats;","import { React, useState, useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport { Row, Col, Table } from \"react-bootstrap\";\nimport \"./leaderBoard.css\"\n\nfunction LeaderBoard() {\n    // state for holding all users in database\n    const [users, setUsers] = useState([])\n    // grabbing all users from database and assigning them to the users state\n    useEffect(() => {\n        API.getAllUsers()\n            .then((res) => {\n                setUsers(res.data);\n                console.log(users, \"users\")\n                console.log(res.data, \"res.data\")\n            })\n    }, []);\n    // once the users state is set render table \n    if (users.length > 0) {\n        // sorting the users array by most wins to least\n        users.sort((a, b) => parseFloat(b.ironManStats.wins) - parseFloat(a.ironManStats.wins));\n        return (\n            <Row>\n                <Col sm={12} md={12} id=\"leaderBoard\">\n                    <Table striped bordered hover >\n                        <thead>\n                            <tr>\n                                <th>Portrait</th>\n                                <th>Name</th>\n                                <th>Wins</th>\n                                <th>Losses</th>\n                                <th>Win %</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                // generating table rows by mapping through the users state\n                                users.map(user => {\n                                    const totalGames = parseInt(user.ironManStats.wins) + parseInt(user.ironManStats.losses);\n                                    const winPercentage = Math.round(parseInt(user.ironManStats.wins) / totalGames * 100)\n                                    return (\n                                        <tr id=\"tableRow\">\n                                            <td> <img alt=\"user portrait\" src={user.portrait} id=\"boardPortrait\" /></td>\n                                            <td>{user.name}</td>\n                                            <td>{user.ironManStats.wins}</td>\n                                            <td>{user.ironManStats.losses}</td>\n                                            <td>{winPercentage}%</td>\n                                        </tr>\n                                    )\n                                })}\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        )\n    }\n    else {\n        return (\n            <></>\n        )\n    }\n\n}\n\nexport default LeaderBoard","import React from \"react\";\nimport \"./footer.css\";\nfunction Footer () {\n\n    return(\n        <div id=\"footer\">\n            <p>For Your Pleasure</p>\n        </div>\n    )\n}\n\nexport default Footer;","import { React, useContext, useState } from \"react\";\nimport UserContext from \"../../utils/UserContext\";\nimport API from \"../../utils/API\"\nimport FavoriteCharacter from \"../../components/FavoriteCharacter/favoriteCharacter\";\nimport UserStats from \"../../components/UserStats/userStats\";\nimport CreateIronMan from \"../../components/CreateIronMan/createIronMan\";\nimport JoinIronMan from \"../../components/JoinIronMan/joinIronMan\";\nimport FavCharStats from \"../../components/FavCharStats/favCharStats\";\nimport LeaderBoard from \"../../components/LeaderBoard/leaderBoard\";\nimport Footer from \"../../components/Footer/footer\";\nimport { Container, Row, Col, Tab, Nav } from \"react-bootstrap\";\nimport \"./mainDashboard.css\";\n\nfunction MainDashboard(props) {\n    // currently logged in user data\n    const { name, portrait } = useContext(UserContext);\n    // state to set for individual character on click\n    const [charState, setCharState] = useState({\n        character: \"\",\n        portrait: \"\",\n        quote:\"\",\n    });\n    // on click function that grabs the characters stats for the logged in user for that character \n    const changeTheme = (character, portrait, quote) => {\n        API.getUserByName(name)\n        .then((res) =>{\n            const thisCharStats = res.data.characterStats.find(x => x.name === character);\n            setCharState({\n                ...charState,\n                character: character,\n                portrait: portrait,\n                quote: quote,\n                stats: thisCharStats\n            });\n        })\n    };\n\n    return (\n        <div>\n        <Container fluid id=\"dashboard\">\n            <Row id=\"header\">\n                <Col sm={8} md={8}>\n                    <h1>Welcome To Smash Ultimatum</h1>\n                </Col>\n                <Col sm={4} md={4}>\n                    <h1 className=\"userInfo\">{name}</h1>\n                    <img className=\"userInfo\" id=\"userPortrait\"alt=\"portrait\" src={portrait}></img>\n                </Col>\n            </Row>\n            <Row>\n                <Tab.Container defaultActiveKey=\"first\">\n                    <Row>\n                        <Col sm={12} md={3}>\n                            <Nav variant=\"pills\" className=\"flex-column\">\n                                <Nav.Item variant=\"secondary\">\n                                    <Nav.Link id=\"navPill1\" eventKey=\"first\">Create an Iron Man Arena</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link id=\"navPill2\" eventKey=\"second\">Join an Iron Man Arena</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link id=\"navPill3\" eventKey=\"third\">{name}'s Stats</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link id=\"navPill4\" eventKey=\"fourth\">Character Stats</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link id=\"navPill5\" eventKey=\"fifth\">Leaderboard</Nav.Link>\n                                </Nav.Item>\n                            </Nav>\n                            <FavCharStats stats={charState} />\n                        </Col>\n                        <Col sm={12} md={9}>\n                            <Tab.Content>\n                                <Tab.Pane eventKey=\"first\">\n                                    <CreateIronMan updateContext={props.updateContext} />\n                                </Tab.Pane>\n                                <Tab.Pane eventKey=\"second\">\n                                    <JoinIronMan />\n                                </Tab.Pane>\n                                <Tab.Pane eventKey=\"third\">\n                                    <UserStats />\n                                </Tab.Pane>\n                                <Tab.Pane eventKey=\"fourth\">\n                                    <FavoriteCharacter className=\"favChar\" themeChanger={changeTheme} />\n                                </Tab.Pane>\n                                <Tab.Pane eventKey=\"fifth\">\n                                    <LeaderBoard />\n                                </Tab.Pane>\n                            </Tab.Content>\n                        </Col>\n                    </Row>\n                </Tab.Container>\n            </Row>\n        </Container>\n        <Footer />\n        </div>\n    )\n}\nexport default MainDashboard;","import { React, useEffect, useState, useContext, useRef } from \"react\";\nimport UserContext from \"../../utils/UserContext\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport { Container, Row, Col, Spinner } from \"react-bootstrap\";\nimport \"./squadMaker.css\";\n\n\n// function that does all the arena page magic\n\nfunction SquadMaker() {\n    // getting this arenas lobbyCode\n    const lobbyCode = window.location.pathname.substr(-6);\n    // getting currently logged in users name\n    const { name } = useContext(UserContext);\n    const permanentName = useRef();\n    permanentName.current = name\n    // array of all participants currently in this arena\n    const [participants, setParticipants] = useState([]);\n    // entire arena object from database\n    const [arenaData, setArenaData] = useState({});\n    // winner object updated when conditions have been met\n    const [winner, setWinner] = useState({\n        name: \"\",\n        portrait: \"\"\n    });\n    const [winnerModalIsOpen, setWinnerModalIsOpen] = useState(false);\n    const [voteModalIsOpen, setVoteModalIsOpen] = useState(false);\n    const [roundWinner, setRoundWinner] = useState(\"\");\n    const vote = useRef();\n    const didVote = useRef();\n    // changing the modal display status\n    const winnerModalToggle = () => {\n        setWinnerModalIsOpen(true);\n    };\n    // custom css tweaks of modal\n    const customStyles = {\n        content: {\n            top: \"50%\",\n            left: \"50%\",\n            right: \"auto\",\n            bottom: \"auto\",\n            marginRight: \"-50%\",\n            transform: \"translate(-50%, -50%)\",\n            background: \"rgb(189, 189, 189)\",\n        }\n    };\n    // reroute to dashboard after clicking exit arena button\n    const exitArena = () => {\n        window.open(\"https://smash-ultimatum.herokuapp.com/dashboard\", \"_self\");\n    };\n    // starts grabbing the arena database object every 4 seconds and updates the arena data on the front end\n\n    useEffect(() => {\n        let myInterval = setInterval(async () => {\n            try {\n                await API.getArenaByLobbyCode(lobbyCode)\n                    .then(async (res) => {\n                        try {\n                            setParticipants(res.data.participants)\n                            setArenaData({\n                                brawlers: res.data.brawlers,\n                                lobbyCode: res.data.lobbyCode,\n                                participants: res.data.participants,\n                                admin: res.data.admin,\n                                vote: res.data.vote\n                            });\n                            if (permanentName.current !== res.data.admin) {\n                                voteTally();\n                            };\n                            if (res.data.vote.yays + res.data.vote.nays === 0 && res.data.vote.voteOpen === false) {\n                                setVoteModalIsOpen(false);\n                            };\n                            await statusCheck();\n                        }\n                        catch (err) {\n                            throw err;\n                        };\n                    });\n            }\n            catch (err) {\n                throw err;\n            };\n        }, 2000);\n        return () => {\n            clearInterval(myInterval);\n        };\n    }, []);\n\n    const statusCheck = async () => {\n        try {\n            await API.getArenaByLobbyCode(lobbyCode)\n                .then(async (res) => {\n                    try {\n                        if (res.data.vote.voteOpen === true) {\n                            setRoundWinner(res.data.roundWinner);\n                            setVoteModalIsOpen(true);\n                        }\n                        else {\n                            setVoteModalIsOpen(false);\n                            didVote.current = false;\n                        };\n                        res.data.participants.forEach(participant => {\n                            if (parseInt(participant.wins) === parseInt(res.data.brawlers)) {\n                                setWinner({ ...winner, name: participant.name, portrait: participant.portrait });\n                                winnerModalToggle();\n                            };\n                        });\n                        if (res.data.participants.length > 1) {\n                            if (res.data.vote.yays + res.data.vote.nays === res.data.participants.length - 1) {\n                                if (res.data.vote.nays === 0 && permanentName.current === res.data.admin) {\n                                    updater(res.data.roundWinner);\n                                    API.updateArena(lobbyCode, { vote: { voteOpen: false, yays: 0, nays: 0 } })\n                                    setVoteModalIsOpen(false)\n                                }\n                                else {\n                                    API.updateArena(lobbyCode, { vote: { voteOpen: false, yays: 0, nays: 0 } });\n                                };\n                            };\n                        };\n                    }\n                    catch (err) {\n                        throw err;\n                    };\n                });\n        }\n        catch (err) {\n            throw err;\n        };\n    };\n\n    const voteTally = async () => {\n        try {\n            if (vote.current === \"Yes\") {\n                await API.getArenaByLobbyCode(lobbyCode)\n                    .then(async (res) => {\n                        try {\n                            await API.updateArena(lobbyCode,\n                                { vote: { voteOpen: true, yays: res.data.vote.yays + 1, nays: res.data.vote.nays } })\n                                .then((res) => {\n\n                                    vote.current = \"\";\n                                });\n                        }\n                        catch (err) {\n                            throw err;\n                        };\n\n                    });\n            }\n            else if (vote.current === \"No\") {\n                await API.getArenaByLobbyCode(lobbyCode)\n                    .then(async (res) => {\n                        try {\n                            await API.updateArena(lobbyCode,\n                                { vote: { voteOpen: true, yays: res.data.vote.yays, nays: res.data.vote.nays + 1 } });\n\n                            vote.current = \"\"\n                        }\n                        catch (err) {\n                            throw err;\n                        };\n\n                    });\n            };\n        }\n        catch (err) {\n            throw err;\n        };\n\n    };\n\n    const openVote = (event) => {\n        API.updateArena(lobbyCode, { roundWinner: event.target.attributes.name.value, vote: { voteOpen: true, yays: 0, nays: 0 } });\n    }\n\n    // function that is triggerd everytime a unanimous yes vote is given\n    const updater = (roundWinner) => {\n        API.getArenaByLobbyCode(lobbyCode)\n            .then((res) => {\n                const arenaParticipants = res.data.participants\n                const winningParticipantName = roundWinner;\n                const winningParticipantData = arenaParticipants.find(participant => participant.name === winningParticipantName);\n                const winningParticipantSquad = winningParticipantData.squad;\n\n                const index = arenaParticipants.findIndex(participant => participant.name === winningParticipantName);\n                arenaParticipants[index].wins++;\n\n                // for every participant in the arena get their user object from the database\n                arenaParticipants.forEach((participant) => {\n                    const winningCharacter = participant.currCharacter;\n                    //grabbing the users object from database\n                    API.getUserByName(participant.name)\n                        .then(async (res) => {\n                            try {\n                                // if this participant was the victorious one find the charcter they were victorious with\n                                // in their user document from database and add one to their wins value\n                                if (res.data.name === winningParticipantName) {\n                                    await res.data.characterStats.forEach(character => {\n                                        if (character.name === winningCharacter) {\n                                            character.wins = character.wins + 1;\n                                        };\n                                    });\n                                    const newUserData = {\n                                        characterStats: res.data.characterStats,\n                                    }\n                                    // update the winners user document in database with the +1 win on that character\n                                    API.updateUserByName(res.data.name, newUserData);\n                                }\n                                // for the non victorious participants\n                                else {\n                                    // find the character they lost with in the users database document and add one loss to their loss value\n                                    await res.data.characterStats.forEach(character => {\n                                        if (character.name === participant.currCharacter) {\n                                            character.losses = character.losses + 1;\n                                        };\n                                    });\n                                    const newUserData = {\n                                        characterStats: res.data.characterStats,\n                                    }\n                                    //updating the losers user document in database with +1 loss on their character\n                                    API.updateUserByName(res.data.name, newUserData);\n                                }\n                            }\n                            catch (err) {\n                                throw err;\n                            }\n                        })\n                })\n                // setting participants wins and what characters should be hidden if their is not a winner yet\n                if (winningParticipantData.wins !== winningParticipantData.squad.length) {\n                    for (let i = 0; i < winningParticipantData.wins; i++) {\n                        winningParticipantSquad[i].didWin = true;\n                    }\n                    if (winningParticipantSquad[winningParticipantData.squad.length - 1].hidden === true) {\n                        for (let i = 0; i < winningParticipantData.wins + 1; i++) {\n                            winningParticipantSquad[i].hidden = false;\n                            winningParticipantData.currCharacter = winningParticipantSquad.find(character => character.didWin === false).name;\n                            arenaParticipants[index] = winningParticipantData;\n                            API.updateArena(lobbyCode, { participants: arenaParticipants });\n                        }\n                    }\n                }\n                // if their is a winner update the users documents in the database\n                else {\n                    winningParticipantSquad[winningParticipantSquad.length - 1].didWin = true;\n                    API.updateArena(lobbyCode, { participants: arenaParticipants });\n                    arenaParticipants.forEach(participant => {\n                        // getting the user document from database\n                        API.getUserByName(participant.name)\n                            .then((res) => {\n                                // if this user was the winner add a win to their user document and update in database\n                                if (res.data.name === winningParticipantName) {\n                                    const newData = {\n                                        ironManStats: { wins: res.data.ironManStats.wins + 1, losses: res.data.ironManStats.losses }\n                                    };\n                                    API.updateUserByName(res.data.name, newData);\n                                }\n                                // if the user was not the winner add a loss to their user document and update in database\n                                else {\n                                    const newData = {\n                                        ironManStats: { wins: res.data.ironManStats.wins, losses: res.data.ironManStats.losses + 1 },\n                                    };\n                                    API.updateUserByName(res.data.name, newData);\n                                }\n                                // setting the winner state and telling the winner modal to display\n                                setWinner({ ...winner, name: winningParticipantData.name, portrait: winningParticipantData.portrait })\n                                winnerModalToggle();\n                            })\n                    })\n                }\n            })\n\n    }\n    // if participants have been set\n    if (participants !== undefined) {\n        // if the user has admin status meaning they created the arena display the rosters with the victorious buttons\n        if (name === arenaData.admin && participants.length > 1) {\n            return (\n                <Container fluid>\n                    {participants.map((participant) => {\n                        return (\n                            <Row id=\"roster\">\n                                <Row>\n                                    <Col sm={1} md={1}>\n                                        <button name={participant.name} onClick={openVote} id=\"victoryButton\" >Victorious</button>\n                                    </Col>\n                                    <Col id=\"userHeader\" sm={10} md={10}>\n                                        <img id=\"userPortrait\" src={participant.portrait} alt=\"participants portrait\" />\n                                        <h3 id=\"userName\">{participant.name}'s Roster</h3>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col id=\"characterList\" sm={12} md={12} >\n                                        {participant.squad.map(character => {\n                                            if (character.hidden === true && character !== participant.squad[0]) {\n                                                return (\n                                                    <div className=\"hiddenContainer\">\n                                                        <div className=\"hidden\" />\n                                                        <p>???</p>\n                                                    </div>\n                                                )\n                                            }\n                                            else {\n                                                return (\n                                                    <div className=\"character\">\n                                                        <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\n                                                        <p id=\"characterName\">{character.name}</p>\n                                                    </div>\n                                                )\n                                            }\n                                        })}\n                                        <Modal\n                                            isOpen={winnerModalIsOpen}\n                                            style={customStyles}\n                                            contentLabel=\"Modal\"\n                                            id=\"winnerModal\">\n                                            <h1>Congratulations!</h1>\n                                            <br />\n                                            <h2> {winner.name} </h2>\n                                            <br />\n                                            <img alt=\"winner portrait\" src={winner.portrait} id=\"winnerPortrait\" />\n                                            <br />\n                                            <br />\n                                            <h3> You Are The Smash King</h3>\n                                            <br />\n                                            <button\n                                                onClick={exitArena}\n                                            >Exit Arena</button>\n                                        </Modal>\n                                    </Col>\n                                </Row>\n                            </Row>\n                        )\n                    })}\n                </Container>\n\n            )\n        }\n        // if the user has joined the arena but does not have admin status display the rosters without the victorious buttons\n        else if (participants.length > 1) {\n            return (\n                <Container fluid>\n                    {participants.map((participant) => {\n                        return (\n                            <Row id=\"roster\">\n                                <Row>\n                                    <Col id=\"userHeader\" sm={12} md={12}>\n                                        <img id=\"userPortrait\" src={participant.portrait} alt=\"participants portrait\" />\n                                        <h3 id=\"userName\">{participant.name}'s Roster</h3>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col id=\"characterList\" sm={12} md={12} >\n                                        {participant.squad.map(character => {\n                                            if (character.hidden === true && character !== participant.squad[0]) {\n                                                return (\n                                                    <div className=\"hiddenContainer\">\n                                                        <div className=\"hidden\" />\n                                                        <p>???</p>\n                                                    </div>\n                                                )\n                                            }\n                                            else {\n                                                return (\n                                                    <div className=\"character\">\n                                                        <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\n                                                        <p id=\"characterName\">{character.name}</p>\n                                                    </div>\n                                                )\n                                            }\n                                        })}\n                                        <Modal\n                                            isOpen={winnerModalIsOpen}\n                                            style={customStyles}\n                                            contentLabel=\"Modal\"\n                                            id=\"winnerModal\">\n                                            <h1>Congratulations!</h1>\n                                            <br />\n                                            <h2> {winner.name} </h2>\n                                            <br />\n                                            <img alt=\"winner portrait\" src={winner.portrait} id=\"winnerPortrait\" />\n                                            <br />\n                                            <br />\n                                            <h3> You Are The Smash King</h3>\n                                            <br />\n                                            <button\n                                                onClick={exitArena}\n                                            >Exit Arena</button>\n                                        </Modal>\n                                        <Modal\n                                            isOpen={voteModalIsOpen}\n                                            style={customStyles}\n                                            contentLabel=\"Modal\"\n                                            id=\"voteModal\">\n                                            {didVote.current\n                                                ?\n                                                <div>\n                                                    <h1>Thank You For Your Vote!</h1>\n                                                    <h3>One Moment Please</h3>\n                                                    <Spinner animation=\"border\" role=\"status\">\n                                                        <span className=\"visually-hidden\">Loading...</span>\n                                                    </Spinner>\n                                                    <h3>All Votes Are Being Tallied</h3>\n                                                </div>\n                                                :\n                                                <div>\n                                                    <h1>Did {roundWinner}</h1>\n                                                    <h1>Win That Round?</h1>\n                                                    <br />\n                                                    <button\n                                                        id=\"yesButton\"\n                                                        onClick={() => {\n                                                            vote.current = \"Yes\"\n                                                            didVote.current = true\n                                                        }}\n                                                    > Yes\n                                                        <i class=\"fas fa-thumbs-up\"></i>\n                                                    </button>\n                                                    <button\n                                                        id=\"noButton\"\n                                                        onClick={() => {\n                                                            vote.current = \"No\"\n                                                            didVote.current = true\n                                                        }}\n                                                    >No\n                                                        <i class=\"fas fa-thumbs-down\"></i>\n                                                    </button>\n                                                </div>\n                                            }\n                                        </Modal>\n                                    </Col>\n                                </Row>\n                            </Row>\n                        )\n                    })}\n                </Container>\n            );\n        }\n        else {\n            return (\n                <Container>\n                    <Row>\n                        <Col sm={12} md={12} id=\"waitingScreen\">\n                            <h1>Waiting For Someone To Join Your Arena</h1>\n                            <br />\n                            <Spinner animation=\"border\" role=\"status\">\n                                <span className=\"visually-hidden\">Loading...</span>\n                            </Spinner>\n                        </Col>\n                    </Row>\n                </Container>\n            );\n        };\n    };\n}\nexport default SquadMaker;","import { React, useEffect, useState } from \"react\";\nimport API from \"../../utils/API\";\nimport SquadMaker from \"../../components/SquadMaker/squadMaker\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./arena.css\";\n\nfunction Arena() {\n    // getting lobbycode from url\n    const lobbyCode = window.location.pathname.substr(-6);\n    // setting up state to hold arena data\n    const [arenaData, setArenaData] = useState();\n    // reroute to dashboard if leave arena button is clicked\n    const leaveArena = () => {\n        window.open(\"https://smash-ultimatum.herokuapp.com/dashboard\",\"_self\");\n    };\n    // getting arena data by lobby code and storing it in arenaData state\n    useEffect(() => {\n        API.getArenaByLobbyCode(lobbyCode)\n            .then((res) => {\n                setArenaData({\n                    LobbyCode: res.data.lobbyCode,\n                    brawlers: res.data.brawlers,\n                    participants: res.data.participants.length\n                })\n            })\n    }, []);\n    if (arenaData !== undefined) {\n        return (\n            <Container id=\"arena\" fluid>\n                <Row id=\"header\">\n                    <Col sm={12} md={10}>\n                        <h1 id=\"header1\">Welcome to Smash Town</h1>\n                    </Col>\n                    <Col sm={12} md={2}>\n                        <button\n                        id=\"leaveButton\"\n                        onClick={leaveArena}\n                        >Leave Arena</button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"smallHeaders\" sm={12} md={12}>\n                        <h4>Lobby Code: {arenaData.LobbyCode}</h4>\n                    </Col>\n                    <Col className=\"smallHeaders\" sm={12} md={12}>\n                        <h4>{arenaData.brawlers} Man Iron Man</h4>\n                    </Col>\n                </Row>\n                <Row id=\"rosterWindow\">\n                    <SquadMaker />\n                </Row>\n            </Container>\n        )\n    }\n    else {\n        return (\n            <>\n            </>\n        )\n    }\n}\n\nexport default Arena;","import { React, useState, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Login from \"./pages/LoginScreen/loginScreen\";\nimport Dashboard from \"./pages/MainDashboard/mainDashboard\";\nimport Arena from \"./pages/Arena/arena\";\nimport axios from \"axios\";\nimport API from \"./utils/API\";\nimport UserContext from \"./utils/UserContext\";\n\nfunction App() {\n  // logged in user data that is linked to usercontext\n  const [userState, setUserState] = useState({\n    id: \"\",\n    name: \"\",\n    portrait: \"\",\n    LobbyCode: \"\",\n    participants: [],\n    competitors: \"\",\n    brawlers: \"\"\n  });\n\n  //function to update user context passed down as prop\n  const updateContext = (LobbyCode, participants, brawlers) => {\n    setUserState({\n      ...userState,\n      LobbyCode: LobbyCode,\n      participants: participants,\n      brawlers: brawlers\n    })\n  }\n  // sets userState on login\n  useEffect(() => {\n    axios\n      .get(\"/User\")\n      .then((res) => {\n        if (res.data.id) {\n          API.getUserByUserId(res.data.id)\n            .then(res => {\n              setUserState({\n                ...userState,\n                id: res.data._id,\n                name: res.data.name,\n                portrait: res.data.portrait,\n              });\n            });\n        }\n        else {\n          return;\n        }\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n        <UserContext.Provider value={userState} id=\"container\">\n          <BrowserRouter>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path=\"/dashboard\" >\n                <Dashboard updateContext={updateContext} />\n              </Route>\n              <Route path=\"/arena\" component={Arena} />\n            </Switch>\n          </BrowserRouter>\n        </UserContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}