{"version":3,"sources":["components/LoginWindow/loginWindow.jsx","pages/LoginScreen/loginScreen.jsx","utils/UserContext.js","utils/API.js","components/FavoriteCharacter/favoriteCharacter.jsx","components/UserStats/userStats.jsx","components/CreateIronMan/createIronMan.jsx","components/JoinIronMan/joinIronMan.jsx","components/CreateTournament/createTournament.jsx","components/JoinTournament/joinTournament.jsx","components/FavCharStats/favCharStats.jsx","components/IronManLeaderboard/ironManLeaderboard.jsx","components/TournamentLeaderboard/tournamentLeaderboard.jsx","components/Footer/footer.jsx","pages/MainDashboard/mainDashboard.jsx","components/SquadMaker/squadMaker.jsx","pages/Arena/arena.jsx","components/Bracket/bracket.jsx","pages/Tournament/tournament.jsx","App.js","index.js"],"names":["LoginWindow","id","onClick","window","open","class","LoginScreen","Container","fluid","Row","Col","sm","md","UserContext","React","createContext","name","portrait","LobbyCode","participants","brawlers","API","getUserByUserId","axios","get","getUserByName","getAllUsers","saveArena","groupData","post","getArenaByLobbyCode","addArenaParticipant","participantData","put","updateArena","data","updateUserByName","createTournament","lobbyCode","tourneyData","getTournamentByLobbyCode","addTournamentParticipant","updateTournament","FavoriteCharacter","props","className","CharData","characters","map","character","themeChanger","quote","alt","src","UserStats","useContext","useState","userStats","setUserStats","useEffect","length","then","res","ironManStats","tourneyStats","undefined","wins","losses","CreateIronMan","modalIsOpen","setModalIsOpen","history","useHistory","modalToggle","arenaState","setArenaState","isOpen","style","content","top","left","right","bottom","marginRight","transform","background","contentLabel","type","min","onChange","event","target","value","required","Date","now","toString","substring","squad","numbers","array","i","ranNum","Math","floor","random","push","splice","roster","squadId","find","arenaData","currCharacter","admin","vote","voteOpen","yays","nays","a","updateContext","alert","IronMan","setLobbyCode","placeholder","findIndex","participant","newArenaData","CreateTournament","userCharacter","tourneyState","setTourneyState","isSelected","setCurrCharacter","handleInputChange","console","log","innerText","parseInt","tournamentParticipants","Byes","four","eight","tournamentSize","JoinTournament","userData","index","el","newTournamentData","FavCharStats","stats","LeaderBoard","users","setUsers","sort","b","parseFloat","Table","striped","bordered","hover","user","totalGames","winPercentage","round","TournamentLeaderboard","Footer","MainDashboard","charState","setCharState","Tab","defaultActiveKey","Nav","variant","Item","Dropdown","Toggle","size","Menu","Link","eventKey","Content","Pane","thisCharStats","characterStats","x","SquadMaker","location","pathname","substr","permanentName","useRef","current","setParticipants","setArenaData","winner","setWinner","winnerModalIsOpen","setWinnerModalIsOpen","voteModalIsOpen","setVoteModalIsOpen","roundWinner","setRoundWinner","didVote","winnerModalToggle","customStyles","exitArena","myInterval","setInterval","voteTally","statusCheck","clearInterval","forEach","updater","openVote","attributes","arenaParticipants","winningParticipantName","winningParticipantData","winningParticipantSquad","winningCharacter","newUserData","didWin","hidden","newData","Spinner","animation","role","Arena","Bracket","tournamentData","setTournamentData","matches","setMatches","setRound","roundVictors","tournamentLaunched","victorArray","round1","match","victor","indexOf","round2","round3","characterUpdater","thisMatch","losingCharacter","victorSelect","newMatch","tournamentChampion","filter","backgroundColor","color","humanArr","byeArr","byeCount","bye","j","temp","Tournament","App","competitors","userState","setUserState","_id","catch","err","Provider","exact","path","component","Login","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24c46167.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./loginWindow.css\";\nfunction LoginWindow() {\n    // hitting the google login route\n    const googleLogin = () => {\n        window.open(\"http://localhost:8000/auth/google\", \"_self\");\n    }\n    return (\n        <div>\n            <button id=\"googleButton\" onClick={googleLogin}>\n                <i class=\"loginText fab \">Login with Google</i>\n                <i id=\"googleIcon\" class=\"fab fa-google\"></i>\n            </button>\n        </div>\n    )\n}\n\nexport default LoginWindow;","import React from \"react\";\nimport LoginWindow from \"../../components/LoginWindow/loginWindow\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./loginScreen.css\";\n\nfunction LoginScreen(){\n\n    return(\n        <Container fluid id=\"container\">\n            <div id=\"master\">\n            <Row>\n                <Col sm={3} md={3}></Col>\n                <Col id=\"loginBox\" sm={6} md={6}>\n                    <div id=\"content\">\n                        <h1 class=\"loginHeader\">Smash Ultimatum</h1>\n                        <LoginWindow />\n                    </div>\n                </Col>\n                <Col sm={3} md={3}></Col>\n            </Row>\n            </div>\n        </Container>\n    )\n}\n\nexport default LoginScreen;","import React from \"react\";\n// context that holds logged in user data for the front end\nconst UserContext = React.createContext({\n    id: \"\",\n    name: \"\",\n    portrait: \"\",\n    LobbyCode: \"\",\n    participants: [],\n    brawlers: \"\"\n});\n\nexport default UserContext;","import axios from \"axios\";\n\nconst API = {\n    \n    // Returns users using their initial google id, stored in user.userId\n    getUserByUserId: function (id) {\n        return axios.get(\"/api/users/userid/\" + id);\n    },\n    getUserByName: function (name) {\n        return axios.get(\"/api/users/name/\" + name);\n    },\n    getAllUsers: function () {\n        return axios.get(\"/api/users\");\n    },\n    // Saves an Arena to the database\n    saveArena: function (groupData, id) {\n        return axios.post(\"/api/arenas/\" + id, groupData);\n    },\n    //Returns an Arena's info by searching lobbyCode\n    getArenaByLobbyCode: function (id) {\n        return axios.get(\"/api/arenas/find/\" + id);\n    },\n    //adds Participant to arena\n    addArenaParticipant: function (id, participantData){\n        return axios.put(\"/api/arenas/addParticipant/\" + id, participantData)\n    },\n    // to update anything about the arena document\n    updateArena: function(id, data){\n        return axios.put(\"/api/arenas/update/\" + id, data)\n    },\n    // to update stats of user document\n    updateUserByName: function(name, data){\n        return axios.put(\"/api/users/update/\" + name, data)\n    },\n    createTournament: function(lobbyCode, tourneyData){\n        return axios.post(\"/api/tournaments/\" + lobbyCode, tourneyData)\n    },\n    getTournamentByLobbyCode: function(lobbyCode){\n        return axios.get(\"/api/tournaments/\" + lobbyCode)\n    },\n    addTournamentParticipant: function(lobbyCode,participantData){\n        return axios.put(\"/api/tournaments/addParticipant/\" + lobbyCode, participantData)\n    },\n    updateTournament: function(lobbyCode, data){\n        return axios.put(\"/api/tournaments/update/\" + lobbyCode, data);\n    }\n};\nexport default API;","import { React } from \"react\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./favoriteCharacter.css\";\n\nfunction FavoriteCharacter(props) {\n\n    // displays a full roster of all the characters in the charData json file and on click updates the current character selected state\n    return (\n        <div id=\"charSelectWrapper\">\n            <h2>Character Select:</h2>\n            <div className=\"charSelectContainer\" >\n                {CharData.characters.map(character => {\n                    return (\n                        <div className=\"charCard\"\n                            key={character.id}\n                            onClick={() => props.themeChanger(character.name, character.portrait, character.quote)}>\n                            <img alt={character.name}\n                                src={character.portrait}\n                                className=\"charPic\" />\n                            <p className=\"charText\">{character.name}</p>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default FavoriteCharacter;","import { React, useContext, useEffect, useState } from \"react\";\nimport UserContext from \"../../utils/UserContext\";\nimport API from \"../../utils/API\";\nimport \"./userStats.css\";\nimport { Container, Col, Row } from \"react-bootstrap\";\n\nfunction UserStats() {\n    // the logged in users data\n    const { name, portrait } = useContext(UserContext);\n    // setting up stats state that will be updated with api call\n    const [userStats, setUserStats] = useState();\n    // once name is updated get the users data from database and set it to userStats\n    useEffect(() => {\n        if (name.length > 1) {\n            API.getUserByName(name)\n                .then((res) => {\n                    setUserStats({ ironManStats: res.data.ironManStats, tourneyStats: res.data.tourneyStats })\n                });\n        }\n    }, [name]);\n    // if userStats has been updated\n    if (userStats !== undefined) {\n        return (\n            <Container id=\"userStatsContent\">\n                <Row>\n                    <Col sm={12} md={12}>\n                        <h2>{name}'s Stats</h2>\n                        <img src={portrait} alt=\"User Portrait\" id=\"userStatsPortrait\" />\n                        <h3>Iron Man Stats</h3>\n                        <h4>Wins: {userStats.ironManStats.wins}</h4>\n                        <h4>Losses: {userStats.ironManStats.losses}</h4>\n                        <h3>Tournament Stats</h3>\n                        <h4>Wins: {userStats.tourneyStats.wins}</h4>\n                        <h4>Losses: {userStats.tourneyStats.losses}</h4>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n    else {\n        return (\n            <>\n            </>\n        )\n    }\n\n}\n\nexport default UserStats;","import { React, useState, useContext, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./createIronMan.css\";\n\nfunction CreateIronMan(props) {\n    // variables holding currently logged in user data\n    const { name, portrait, LobbyCode } = useContext(UserContext);\n    // variable for whether the modal should be displayed\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    // for routing to arena page after creating arena\n    const history = useHistory();\n    // function for changing modal display status\n    const modalToggle = () => {\n        if (modalIsOpen === true) {\n            setModalIsOpen(false);\n        }\n        else {\n            setModalIsOpen(true);\n        }\n    }\n    // css tweaks of modal\n    const customStyles = {\n        content: {\n            top: \"50%\",\n            left: \"50%\",\n            right: \"auto\",\n            bottom: \"auto\",\n            marginRight: \"-50%\",\n            transform: \"translate(-50%, -50%)\",\n            background: \"rgb(189, 189, 189)\"\n        }\n    };\n    // state to hold team size which is changed on input change in modal\n    const [arenaState, setArenaState] = useState({\n        brawlers: \"\",\n    });\n    // function that is run when create arena button is clicked\n    const launchArena = () => {\n        if(arenaState.brawlers !== \"\"){\n\n        \n        const lobbyCode = Date.now().toString().substring(Date.now().toString().length - 6);\n        // function that generates an array of random numbers 1-72 with no repeats the length of arena team size\n        const roster = (brawlers) => {\n            const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n                \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n                \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\",\n                \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\",\n                \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"];\n            const array = [];\n            for (let i = 0; i < brawlers; i++) {\n                const ranNum = Math.floor(Math.random() * (71 - i));\n                array.push(numbers[ranNum]);\n                numbers.splice(ranNum, 1);\n            }\n            return array;\n        }\n        // assigning array of random numbers to the variable squadIds\n        const squadIds = roster(arenaState.brawlers);\n        // inserting the actual character data for each individual Id \n        const squad = squadIds.map(squadId => CharData.characters.find(character => character.id === squadId));\n        // arena object that will be used to create the arena\n        const arenaData = {\n            brawlers: arenaState.brawlers,\n            lobbyCode: lobbyCode.substring(lobbyCode.length - 6),\n            participants: { name: name, portrait: portrait, squad: squad, wins: 0, currCharacter:squad[0].name },\n            admin:name,\n            vote:{voteOpen:false, yays:0, nays:0}\n        }\n        // saving the arena to the database\n        API.saveArena(arenaData, lobbyCode)\n            .then(async (res) => {\n                try {\n                    await props.updateContext(res.data.lobbyCode, res.data.participants, res.data.brawlers)\n                    history.push(\"/arena/\" + lobbyCode)\n                }\n                catch (err) {\n                    throw err\n                }\n            });\n        }\n        else{\n            alert(\"Please Set How Many Brawlers On A Squad\")\n        }\n    }\n\n    // function run everytime there is an input change on the input bar in modal\n    const handleInputChange = (event) => {\n            setArenaState({ ...arenaState, brawlers: event.target.value })\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col sm={12} md={12}>\n                    <div id=\"createIronMan\">\n                        <h1>Create Iron Man</h1>\n                        <h4 id=\"createText\">Create An Iron Man Arena For Others To Join And Set The Team Size</h4>\n                        <Modal\n                            isOpen={modalIsOpen}\n                            style={customStyles}\n                            contentLabel=\"Modal\">\n                            <button\n                                onClick={modalToggle}>Close\n                            </button>\n                            <br />\n                            <br />\n                            <h2>Create Your Arena</h2>\n                            <br />\n                            <h3>How Many Brawlers on a Squad?</h3>\n                            <input\n                                id=\"brawlwers\"\n                                type=\"number\"\n                                min=\"2\"\n                                onChange={handleInputChange}\n                                required />\n                            <br />\n                            <br />\n                            <button\n                                onClick={launchArena}\n                            >Create Arena</button>\n                        </Modal>\n                        <button className=\"createButton\" onClick={modalToggle}>Smash Time</button>\n                    </div >\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default CreateIronMan;","import { React, useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./joinIronMan.css\";\n\nfunction IronMan() {\n    // state used to set arena code that will be used to reroute to the correct arena \n    const [LobbyCode, setLobbyCode] = useState(\"\");\n    // user data which is used to add user to the arena\n    const { name, portrait } = useContext(UserContext);\n    // for rerouting capabilities\n    const history = useHistory();\n    // for live updating of arena code on input change\n    const handleInputChange = (event) => {\n        setLobbyCode(event.target.value);\n    }\n    // function that generates an array of random numbers 1-72 with no repeats the length of arena team size\n    const roster = (brawlers) => {\n        const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n            \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n            \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\",\n            \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\",\n            \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"];\n        const array = [];\n        for (let i = 0; i < brawlers; i++) {\n            const ranNum = Math.floor(Math.random() * (71 - i));\n            array.push(numbers[ranNum]);\n            numbers.splice(ranNum, 1);\n        }\n        return array;\n    }\n    // function that is ran when join button is clicked\n    const joinArena = () => {\n        // finds the arena with the lobbycode\n        API.getArenaByLobbyCode(LobbyCode)\n            .then((res) => {\n                // if the arena was found\n                if (res.data !== null) {\n                    // if this user is already a participant in that arena reroute to the arena page\n                    if (res.data.participants.findIndex(participant => participant.name === name) !== -1) {\n                        history.push(\"/arena/\" + LobbyCode);\n                        return;\n                    }\n                    // if user is not a participant generate them a team and update the arena with this participant\n                    else {\n                        const squadIds = roster(res.data.brawlers);\n                        const squad = squadIds.map(squadId => CharData.characters.find(character => character.id === squadId));\n                        const newArenaData = {\n                            brawlers: res.data.brawlers,\n                            lobbyCode: res.data.lobbyCode,\n                            participants: [...res.data.participants, { name: name, portrait: portrait, squad: squad, wins: 0, currCharacter: squad[0].name }]\n                        }\n                        // updating the arena in database then rerouting to arena page\n                        API.addArenaParticipant(LobbyCode, newArenaData)\n                            .then((res) => {\n                                history.push(\"/arena/\" + LobbyCode)\n                            })\n                    }\n                }\n                // if arena was not found alert arena not found\n                else {\n                    alert(\"Arena Not Found!\")\n                }\n\n            })\n    }\n\n    return (\n        <Container id=\"joinContent\">\n            <Row>\n                <Col sm={12} md={12}>\n                    <div>\n                        <h1>Join Iron Man</h1>\n                        <h4 id=\"joinText\">Join An Iron Man Arena By Entering The Arena's Lobby Code</h4>\n                        <input onChange={handleInputChange} placeholder=\"Lobby Code\" />\n                        <br />\n                        <button id=\"joinButton\" onClick={joinArena}>Join Arena</button>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default IronMan;","import { React, useState, useContext, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport Byes from \"./byes.json\";\nimport \"./createTournament.css\";\n\nfunction CreateTournament(props) {\n\n    const { name, portrait, LobbyCode } = useContext(UserContext);\n\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    // for routing to arena page after creating arena\n    const history = useHistory();\n    // function for changing modal display status\n    const modalToggle = () => {\n        if (modalIsOpen === true) {\n            setModalIsOpen(false);\n        }\n        else {\n            setModalIsOpen(true);\n        }\n    }\n    // css tweaks of modal\n    const customStyles = {\n        content: {\n            top: \"50%\",\n            left: \"50%\",\n            right: \"auto\",\n            bottom: \"auto\",\n            marginRight: \"-50%\",\n            transform: \"translate(-50%, -50%)\",\n            background: \"rgb(189, 189, 189)\"\n        }\n    };\n    // state to hold number of participants in tournament\n    const [tourneyState, setTourneyState] = useState({\n        participants: \"4\",\n        userCharacter: \"\"\n    });\n    const [currCharacter, setCurrCharacter] = useState({\n        character: {\n            portrait: \"\",\n            quote: \"\"\n        },\n        isSelected: false\n    });\n\n    const handleInputChange = (event) => {\n        console.log(event)\n        setTourneyState({ ...tourneyState, participants: event.target.innerText})\n    };\n    const launchTourney = () => {\n        if(parseInt(tourneyState.participants) > 1 && currCharacter.isSelected === true){\n        let tournamentParticipants;\n            if(tourneyState.participants === \"4\"){\n                tournamentParticipants = Byes.four;\n            }\n            else{\n                tournamentParticipants = Byes.eight;\n            }\n        const lobbyCode = Date.now().toString().substring(Date.now().toString().length - 6);\n        const character = CharData.characters.find(character => character.id === tourneyState.userCharacter);\n        const tourneyData = {\n            lobbyCode: lobbyCode,\n            tournamentSize: tourneyState.participants,\n            participants: [{ name: name, portrait: portrait, character: character }, ...tournamentParticipants],\n            admin: name\n        };\n        API.createTournament(lobbyCode, tourneyData)\n            .then(async (res) => {\n                try {\n                    await props.updateContext(res.data.lobbyCode, res.data.participants, res.data.brawlers)\n                    history.push(\"/tournament/\" + lobbyCode)\n                }\n                catch (err) {\n                    throw err\n                }\n            });\n        }\n        else{\n            alert(\"Please Select A Character Before Creating A Tournament\")\n        }\n    };\n\n    useEffect(() => {\n        if (tourneyState.userCharacter.length >= 1) {\n            const character = CharData.characters.find(character => character.id === tourneyState.userCharacter);\n            setCurrCharacter({ ...currCharacter, character: character, isSelected: true });\n        }\n    }, [tourneyState])\n\n    return (\n        <Container>\n            <Row>\n                <Col sm={12} md={12}>\n                    <div id=\"createTournament\">\n                        <h1>Create Tournament</h1>\n                        <h4 id=\"createText\">Create A Tournament And Select Your Fighter</h4>\n                        <Modal\n                            id=\"createTourneyModal\"\n                            isOpen={modalIsOpen}\n                            style={customStyles}\n                            contentLabel=\"Modal\">\n                            <button\n                                onClick={modalToggle}>Close\n                            </button>\n                            <br />\n                            <br />\n                            <h3>How Many Participating In Your Tournament</h3>\n                            <button\n                            id=\"sizeButton\"\n                            onClick={handleInputChange}>4</button>\n                            <button\n                            id=\"sizeButton\"\n                            onClick={handleInputChange}>8</button>\n                            <h3>Current Tournament Size: {tourneyState.participants}</h3>\n                            <h3>Chose Your Character:</h3>\n                            {(currCharacter.isSelected === true)\n                                    ?\n                                    <div id=\"characterDisplay\">\n                                        <img alt=\"selected character\" src={currCharacter.character.portrait} id=\"currCharacter\"/>\n                                        <h5>{currCharacter.character.quote}</h5>\n                                    </div>\n                                    :\n                                    <div />\n                            }\n                            <div id=\"tourneyCharSelect\">\n                                {CharData.characters.map(character => {\n                                    return (\n                                        <div className=\"charCard\"\n                                            key={character.id}\n                                            onClick={() => {\n                                                setTourneyState({ ...tourneyState, userCharacter: character.id })\n                                            }}>\n                                            <img alt={character.name}\n                                                src={character.portrait}\n                                                className=\"charPic\" />\n                                            <p className=\"charText\">{character.name}</p>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                            <button\n                                onClick={launchTourney}\n                            >Create Tournament</button>\n                        </Modal>\n                        <button className=\"createButton\" onClick={modalToggle}>Smash Time</button>\n                    </div >\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default CreateTournament;","import { React, useState, useContext, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport CharData from \"../../utils/SmashCharacters.json\";\nimport \"./joinTournament.css\";\n\nfunction JoinTournament() {\n    const { name, portrait } = useContext(UserContext);\n    const [lobbyCode, setLobbyCode] = useState(\"\");\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    const [currCharacter, setCurrCharacter] = useState({\n        character: {\n            portrait: \"\",\n            quote: \"\"\n        },\n        isSelected: false\n    });\n    const [tourneyState, setTourneyState] = useState({\n        userCharacter: \"\"\n    });\n    const history = useHistory();\n    // function for changing modal display status\n    const modalToggle = () => {\n        if (modalIsOpen === true) {\n            setModalIsOpen(false);\n        }\n        else {\n            setModalIsOpen(true);\n        }\n    }\n    // css tweaks of modal\n    const customStyles = {\n        content: {\n            top: \"50%\",\n            left: \"50%\",\n            right: \"auto\",\n            bottom: \"auto\",\n            marginRight: \"-50%\",\n            transform: \"translate(-50%, -50%)\",\n            background: \"rgb(189, 189, 189)\"\n        }\n    };\n    const handleInputChange = (event) => {\n        setLobbyCode(event.target.value);\n    };\n\n    const launchTourney = () => {\n\n        API.getTournamentByLobbyCode(lobbyCode)\n            .then((res) => {\n                if (res.data !== null) {\n                    // if this user is already a participant in that tournament reroute to the tournament page\n                    if (res.data.participants.findIndex(participant => participant.name === name) !== -1) {\n                        history.push(\"/tournament/\" + lobbyCode);\n                        return;\n                    }\n                    else if(currCharacter.isSelected === true){\n                        const character = CharData.characters.find(character => character.id === tourneyState.userCharacter);\n                        const userData = {\n                            name: name,\n                            portrait: portrait,\n                            character: character\n                        };\n                        const index = res.data.participants.findIndex(el => el.name === \"Bye\");\n                        if (index !== -1) {\n                            res.data.participants[index] = userData;\n                        };\n                        const newTournamentData = {\n                            participants: [...res.data.participants],\n                            lobbyCode: res.data.lobbyCode,\n                            tournamentSize: res.data.tournamentSize,\n                            admin: res.data.admin\n                        }\n                        // updating the arena in database then rerouting to arena page\n                        API.addTournamentParticipant(lobbyCode, newTournamentData)\n                            .then((res) => {\n                                history.push(\"/tournament/\" + lobbyCode)\n                            })\n                    }\n                    else{\n                        alert(\"Please Select A Character Before Joining Tournament\")\n                    }\n                }\n                // if tournament was not found alert tournament not found\n                else {\n                    alert(\"Tournament Not Found!\")\n                }\n\n            })\n\n    };\n    useEffect(() => {\n        if (tourneyState.userCharacter.length >= 1) {\n            const character = CharData.characters.find(character => character.id === tourneyState.userCharacter);\n            setCurrCharacter({ ...currCharacter, character: character, isSelected: true });\n        }\n    }, [tourneyState])\n\n    return (\n        <Container id=\"joinTournament\">\n            <Row>\n                <Col sm={12} md={12}>\n                    <div>\n                        <h1>Join A Tournament</h1>\n                        <h4 id=\"joinText\">Join A Tournament By Entering Lobby Code And Selecting Your Fighter</h4>\n                        <br />\n                        <Modal\n                            id=\"joinTournamentModal\"\n                            isOpen={modalIsOpen}\n                            style={customStyles}\n                            contentLabel=\"Modal\">\n                            <button\n                                onClick={modalToggle}>Close\n                            </button>\n                            <br />\n                            <br />\n                            <h2>Join A Tournament</h2>\n                            <br />\n                            <h3>Enter Tournament Lobby Code</h3>\n                            <input\n                                type=\"number\"\n                                min=\"6\"\n                                onChange={handleInputChange}\n                                required />\n                            <br />\n                            <br />\n                            <h3>Chose Your Character:</h3>\n                            {(currCharacter.isSelected === true)\n                                ?\n                                <div id=\"characterDisplay\">\n                                    <img alt=\"selected character\" src={currCharacter.character.portrait} id=\"currCharacter\" />\n                                    <h5>{currCharacter.character.quote}</h5>\n                                </div>\n                                :\n                                <div />\n                            }\n                            <div id=\"tourneyCharSelect\">\n                                {CharData.characters.map(character => {\n                                    return (\n                                        <div className=\"charCard\"\n                                            key={character.id}\n                                            onClick={() => {\n                                                setTourneyState({ ...tourneyState, userCharacter: character.id })\n                                            }}>\n                                            <img alt={character.name}\n                                                src={character.portrait}\n                                                className=\"charPic\" />\n                                            <p className=\"charText\">{character.name}</p>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                            <button\n                                onClick={launchTourney}\n                            >Join Tournament</button>\n                        </Modal>\n                        <button id=\"joinButton\" onClick={modalToggle}>Join a Tournament</button>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default JoinTournament;","import { React } from \"react\";\nimport \"./favCharStats.css\";\n\nfunction FavCharStats(props) {\n    // component that will display if a character was selected from Favorite character component \n    if (props.stats.character.length > 1) {\n        console.log(props.stats,\"props.stats\")\n        return (\n            <div id=\"charCard\">\n                <h3>{props.stats.quote}</h3>\n                <img id=\"charImg\" src={props.stats.portrait} alt=\"character portrait\" />\n                <h4>Wins: {props.stats.stats.wins}</h4>\n                <h4>Loses: {props.stats.stats.losses}</h4>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div />\n        )\n    }\n}\nexport default FavCharStats;","import { React, useState, useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\nimport \"./ironManLeaderboard.css\"\n\nfunction LeaderBoard() {\n    // state for holding all users in database\n    const [users, setUsers] = useState([])\n    // grabbing all users from database and assigning them to the users state\n    useEffect(() => {\n        API.getAllUsers()\n            .then((res) => {\n                setUsers(res.data);\n            })\n    }, []);\n    // once the users state is set render table \n    if (users.length > 0) {\n        // sorting the users array by most wins to least\n        users.sort((a, b) => parseFloat(b.ironManStats.wins) - parseFloat(a.ironManStats.wins));\n        return (\n            <Container fluid>\n                <Row>\n                    <Col sm={12} md={12} id=\"leaderboardHeader\">\n                    <h2>Iron Man Leaderboard</h2>\n                    </Col>\n                </Row>\n            <Row>\n                <Col sm={12} md={12} id=\"leaderBoard\">\n                    <Table striped bordered hover >\n                        <thead>\n                            <tr>\n                                <th>Portrait</th>\n                                <th>Name</th>\n                                <th>Wins</th>\n                                <th>Losses</th>\n                                <th>Win %</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                // generating table rows by mapping through the users state\n                                users.map(user => {\n                                    const totalGames = parseInt(user.ironManStats.wins) + parseInt(user.ironManStats.losses);\n                                    const winPercentage = Math.round(parseInt(user.ironManStats.wins) / totalGames * 100)\n                                    return (\n                                        <tr id=\"tableRow\">\n                                            <td> <img alt=\"user portrait\" src={user.portrait} id=\"boardPortrait\" /></td>\n                                            <td>{user.name}</td>\n                                            <td>{user.ironManStats.wins}</td>\n                                            <td>{user.ironManStats.losses}</td>\n                                            <td>{winPercentage}%</td>\n                                        </tr>\n                                    )\n                                })}\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n            </Container>\n        )\n    }\n    else {\n        return (\n            <></>\n        )\n    }\n\n}\n\nexport default LeaderBoard","import { React, useState, useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\nimport \"./tournamentLeaderboard.css\";\n\nfunction TournamentLeaderboard() {\n    // state for holding all users in database\n    const [users, setUsers] = useState([])\n    // grabbing all users from database and assigning them to the users state\n    useEffect(() => {\n        API.getAllUsers()\n            .then((res) => {\n                setUsers(res.data);\n                console.log(users, \"users\")\n                console.log(res.data, \"res.data\")\n            })\n    }, []);\n    // once the users state is set render table \n    if (users.length > 0) {\n        // sorting the users array by most wins to least\n        users.sort((a, b) => parseFloat(b.tourneyStats.wins) - parseFloat(a.tourneyStats.wins));\n        return (\n            <Container fluid>\n                <Row>\n                    <Col sm={12} md={12} id=\"leaderboardHeader\">\n                        <h2>Tournament Leaderboard</h2>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={12} md={12} id=\"leaderBoard\">\n                        <Table striped bordered hover >\n                            <thead>\n                                <tr>\n                                    <th>Portrait</th>\n                                    <th>Name</th>\n                                    <th>Wins</th>\n                                    <th>Losses</th>\n                                    <th>Win %</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    // generating table rows by mapping through the users state\n                                    users.map(user => {\n                                        const totalGames = parseInt(user.tourneyStats.wins) + parseInt(user.tourneyStats.losses);\n                                        const winPercentage = Math.round(parseInt(user.tourneyStats.wins) / totalGames * 100)\n                                        return (\n                                            <tr id=\"tableRow\">\n                                                <td> <img alt=\"user portrait\" src={user.portrait} id=\"boardPortrait\" /></td>\n                                                <td>{user.name}</td>\n                                                <td>{user.tourneyStats.wins}</td>\n                                                <td>{user.tourneyStats.losses}</td>\n                                                <td>{winPercentage}%</td>\n                                            </tr>\n                                        )\n                                    })}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n    else {\n        return (\n            <></>\n        )\n    }\n\n}\n\nexport default TournamentLeaderboard;","import React from \"react\";\nimport \"./footer.css\";\nfunction Footer () {\n\n    return(\n        <div id=\"footer\">\n            <p>For Your Pleasure</p>\n        </div>\n    )\n}\n\nexport default Footer;","import { React, useContext, useState } from \"react\";\nimport UserContext from \"../../utils/UserContext\";\nimport API from \"../../utils/API\"\nimport FavoriteCharacter from \"../../components/FavoriteCharacter/favoriteCharacter\";\nimport UserStats from \"../../components/UserStats/userStats\";\nimport CreateIronMan from \"../../components/CreateIronMan/createIronMan\";\nimport JoinIronMan from \"../../components/JoinIronMan/joinIronMan\";\nimport CreateTournament from \"../../components/CreateTournament/createTournament\";\nimport JoinTournament from \"../../components/JoinTournament/joinTournament\";\nimport FavCharStats from \"../../components/FavCharStats/favCharStats\";\nimport IronManLeaderboard from \"../../components/IronManLeaderboard/ironManLeaderboard\";\nimport TournamentLeaderboard from \"../../components/TournamentLeaderboard/tournamentLeaderboard\";\nimport Footer from \"../../components/Footer/footer\";\nimport { Container, Row, Col, Tab, Nav, Dropdown } from \"react-bootstrap\";\nimport \"./mainDashboard.css\";\n\nfunction MainDashboard(props) {\n    // currently logged in user data\n    const { name, portrait } = useContext(UserContext);\n    // state to set for individual character on click\n    const [charState, setCharState] = useState({\n        character: \"\",\n        portrait: \"\",\n        quote: \"\",\n    });\n    // on click function that grabs the characters stats for the logged in user for that character \n    const changeTheme = (character, portrait, quote) => {\n        API.getUserByName(name)\n            .then((res) => {\n                const thisCharStats = res.data.characterStats.find(x => x.name === character);\n                setCharState({\n                    ...charState,\n                    character: character,\n                    portrait: portrait,\n                    quote: quote,\n                    stats: thisCharStats\n                });\n            })\n    };\n\n    return (\n        <div>\n            <Container fluid id=\"dashboard\">\n                <Row id=\"header\">\n                    <Col sm={8} md={8}>\n                        <h1>Welcome To Smash Ultimatum</h1>\n                    </Col>\n                    <Col sm={4} md={4}>\n                        <h1 className=\"userInfo\">{name}</h1>\n                        <img className=\"userInfo\" id=\"userPortrait\" alt=\"portrait\" src={portrait}></img>\n                    </Col>\n                </Row>\n                <Row>\n                    <Tab.Container defaultActiveKey=\"first\">\n                        <Row>\n                            <Col sm={12} md={3}>\n                                <Nav variant=\"pills\" className=\"flex-column\">\n                                    <Nav.Item variant=\"secondary\">\n                                        <Dropdown>\n                                            <Dropdown.Toggle variant=\"secondary\" size=\"lg\" id=\"dropdown-basic\">\n                                                Iron Man\n                                            </Dropdown.Toggle>\n                                            <Dropdown.Menu>\n                                                <Nav.Link id=\"navPill1\" eventKey=\"first\">Create an Iron Man Arena</Nav.Link>\n                                                <Nav.Link id=\"navPill2\" eventKey=\"second\">Join an Iron Man Arena</Nav.Link>\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n                                    </Nav.Item>\n                                    <Nav.Item>\n                                        <Dropdown>\n                                            <Dropdown.Toggle variant=\"secondary\" size=\"lg\" id=\"dropdown-basic\">\n                                                Tournament\n                                            </Dropdown.Toggle>\n                                            <Dropdown.Menu>\n                                                <Nav.Link id=\"navPill3\" eventKey=\"third\">Create a Tournament</Nav.Link>\n                                                <Nav.Link id=\"navPill4\" eventKey=\"fourth\">Join a Tournament</Nav.Link>\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n                                    </Nav.Item>\n                                    <Nav.Item>\n                                        <Dropdown>\n                                            <Dropdown.Toggle variant=\"secondary\" size=\"lg\" id=\"dropdown-basic\">\n                                                Stats\n                                            </Dropdown.Toggle>\n                                            <Dropdown.Menu>\n                                                <Nav.Link id=\"navPill5\" eventKey=\"fifth\">{name}'s Stats</Nav.Link>\n                                                <Nav.Link id=\"navPill6\" eventKey=\"sixth\">Character Stats</Nav.Link>\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n                                    </Nav.Item>\n                                    <Nav.Item>\n                                    <Dropdown>\n                                            <Dropdown.Toggle variant=\"secondary\" size=\"lg\" id=\"dropdown-basic\">\n                                                LeaderBoards\n                                            </Dropdown.Toggle>\n                                            <Dropdown.Menu>\n                                            <Nav.Link id=\"navPill7\" eventKey=\"seventh\">Iron Man Leaderboard</Nav.Link>\n                                            <Nav.Link id=\"navPill8\" eventKey=\"eighth\">Tournament Leaderboard</Nav.Link>\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n                                    </Nav.Item>\n                                </Nav>\n                                <FavCharStats stats={charState} />\n                            </Col>\n                            <Col sm={12} md={9}>\n                                <Tab.Content>\n                                    <Tab.Pane eventKey=\"first\">\n                                        <CreateIronMan updateContext={props.updateContext} />\n                                    </Tab.Pane>\n                                    <Tab.Pane eventKey=\"second\">\n                                        <JoinIronMan />\n                                    </Tab.Pane>\n                                    <Tab.Pane eventKey=\"third\">\n                                        <CreateTournament updateContext={props.updateContext} />\n                                    </Tab.Pane>\n                                    <Tab.Pane eventKey=\"fourth\">\n                                        <JoinTournament />\n                                    </Tab.Pane>\n                                    <Tab.Pane eventKey=\"fifth\">\n                                        <UserStats />\n                                    </Tab.Pane>\n                                    <Tab.Pane eventKey=\"sixth\">\n                                        <FavoriteCharacter className=\"favChar\" themeChanger={changeTheme} />\n                                    </Tab.Pane>\n                                    <Tab.Pane eventKey=\"seventh\">\n                                        <IronManLeaderboard />\n                                    </Tab.Pane>\n                                    <Tab.Pane eventKey=\"eighth\">\n                                        <TournamentLeaderboard />\n                                    </Tab.Pane>\n                                </Tab.Content>\n                            </Col>\n                        </Row>\n                    </Tab.Container>\n                </Row>\n            </Container>\n            <Footer />\n        </div>\n    )\n}\nexport default MainDashboard;","import { React, useEffect, useState, useContext, useRef } from \"react\";\nimport UserContext from \"../../utils/UserContext\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport { Container, Row, Col, Spinner } from \"react-bootstrap\";\nimport \"./squadMaker.css\";\n\n\n// function that does all the arena page magic\n\nfunction SquadMaker() {\n    // getting this arenas lobbyCode\n    const lobbyCode = window.location.pathname.substr(-6);\n    // getting currently logged in users name\n    const { name } = useContext(UserContext);\n    const permanentName = useRef();\n    permanentName.current = name\n    // array of all participants currently in this arena\n    const [participants, setParticipants] = useState([]);\n    // entire arena object from database\n    const [arenaData, setArenaData] = useState({});\n    // winner object updated when conditions have been met\n    const [winner, setWinner] = useState({\n        name: \"\",\n        portrait: \"\"\n    });\n    const [winnerModalIsOpen, setWinnerModalIsOpen] = useState(false);\n    const [voteModalIsOpen, setVoteModalIsOpen] = useState(false);\n    const [roundWinner, setRoundWinner] = useState(\"\");\n    const vote = useRef();\n    const didVote = useRef();\n    // changing the modal display status\n    const winnerModalToggle = () => {\n        setWinnerModalIsOpen(true);\n    };\n    // custom css tweaks of modal\n    const customStyles = {\n        content: {\n            top: \"50%\",\n            left: \"50%\",\n            right: \"auto\",\n            bottom: \"auto\",\n            marginRight: \"-50%\",\n            transform: \"translate(-50%, -50%)\",\n            background: \"rgb(189, 189, 189)\",\n        }\n    };\n    // reroute to dashboard after clicking exit arena button\n    const exitArena = () => {\n        window.open(\"http://localhost:3000/dashboard\", \"_self\");\n    };\n    // starts grabbing the arena database object every 4 seconds and updates the arena data on the front end\n\n    useEffect(() => {\n        let myInterval = setInterval(async () => {\n            try {\n                await API.getArenaByLobbyCode(lobbyCode)\n                    .then(async (res) => {\n                        try {\n                            setParticipants(res.data.participants)\n                            setArenaData({\n                                brawlers: res.data.brawlers,\n                                lobbyCode: res.data.lobbyCode,\n                                participants: res.data.participants,\n                                admin: res.data.admin,\n                                vote: res.data.vote\n                            });\n                            if (permanentName.current !== res.data.admin) {\n                                voteTally();\n                            };\n                            if (res.data.vote.yays + res.data.vote.nays === 0 && res.data.vote.voteOpen === false) {\n                                setVoteModalIsOpen(false);\n                            };\n                            await statusCheck();\n                        }\n                        catch (err) {\n                            throw err;\n                        };\n                    });\n            }\n            catch (err) {\n                throw err;\n            };\n        }, 2000);\n        return () => {\n            clearInterval(myInterval);\n        };\n    }, []);\n\n    const statusCheck = async () => {\n        try {\n            await API.getArenaByLobbyCode(lobbyCode)\n                .then(async (res) => {\n                    try {\n                        if (res.data.vote.voteOpen === true) {\n                            setRoundWinner(res.data.roundWinner);\n                            setVoteModalIsOpen(true);\n                        }\n                        else {\n                            setVoteModalIsOpen(false);\n                            didVote.current = false;\n                        };\n                        res.data.participants.forEach(participant => {\n                            if (parseInt(participant.wins) === parseInt(res.data.brawlers)) {\n                                setWinner({ ...winner, name: participant.name, portrait: participant.portrait });\n                                winnerModalToggle();\n                            };\n                        });\n                        if (res.data.participants.length > 1) {\n                            if (res.data.vote.yays + res.data.vote.nays === res.data.participants.length - 1) {\n                                if (res.data.vote.nays === 0 && permanentName.current === res.data.admin) {\n                                    updater(res.data.roundWinner);\n                                    API.updateArena(lobbyCode, { vote: { voteOpen: false, yays: 0, nays: 0 } })\n                                    setVoteModalIsOpen(false)\n                                }\n                                else if (res.data.vote.nays > 0) {\n                                    API.updateArena(lobbyCode, { vote: { voteOpen: false, yays: 0, nays: 0 } });\n                                };\n                            }\n                            else if (res.data.vote.yays + res.data.vote.nays > res.data.participants.length - 1) {\n                                if (res.data.vote.nays === 0 && permanentName.current === res.data.admin) {\n                                    updater(res.data.roundWinner);\n                                    API.updateArena(lobbyCode, { vote: { voteOpen: false, yays: 0, nays: 0 } })\n                                    setVoteModalIsOpen(false)\n                                }\n                                else if (res.data.vote.nays > 0) {\n                                    API.updateArena(lobbyCode, { vote: { voteOpen: false, yays: 0, nays: 0 } });\n                                };\n                            };\n                        };\n                    }\n                    catch (err) {\n                        throw err;\n                    };\n                });\n        }\n        catch (err) {\n            throw err;\n        };\n    };\n\n    const voteTally = async () => {\n        try {\n            if (vote.current === \"Yes\") {\n                await API.getArenaByLobbyCode(lobbyCode)\n                    .then(async (res) => {\n                        try {\n                            await API.updateArena(lobbyCode,\n                                { vote: { voteOpen: true, yays: res.data.vote.yays + 1, nays: res.data.vote.nays } })\n                                .then((res) => {\n\n                                    vote.current = \"\";\n                                });\n                        }\n                        catch (err) {\n                            throw err;\n                        };\n\n                    });\n            }\n            else if (vote.current === \"No\") {\n                await API.getArenaByLobbyCode(lobbyCode)\n                    .then(async (res) => {\n                        try {\n                            await API.updateArena(lobbyCode,\n                                { vote: { voteOpen: true, yays: res.data.vote.yays, nays: res.data.vote.nays + 1 } });\n\n                            vote.current = \"\"\n                        }\n                        catch (err) {\n                            throw err;\n                        };\n\n                    });\n            };\n        }\n        catch (err) {\n            throw err;\n        };\n\n    };\n\n    const openVote = (event) => {\n        API.updateArena(lobbyCode, { roundWinner: event.target.attributes.name.value, vote: { voteOpen: true, yays: 0, nays: 0 } });\n    }\n\n    // function that is triggerd everytime a unanimous yes vote is given\n    const updater = (roundWinner) => {\n        API.getArenaByLobbyCode(lobbyCode)\n            .then((res) => {\n                const arenaParticipants = res.data.participants\n                const winningParticipantName = roundWinner;\n                const winningParticipantData = arenaParticipants.find(participant => participant.name === winningParticipantName);\n                const winningParticipantSquad = winningParticipantData.squad;\n\n                const index = arenaParticipants.findIndex(participant => participant.name === winningParticipantName);\n                arenaParticipants[index].wins++;\n\n                // for every participant in the arena get their user object from the database\n                arenaParticipants.forEach((participant) => {\n                    const winningCharacter = participant.currCharacter;\n                    //grabbing the users object from database\n                    API.getUserByName(participant.name)\n                        .then(async (res) => {\n                            try {\n                                // if this participant was the victorious one find the charcter they were victorious with\n                                // in their user document from database and add one to their wins value\n                                if (res.data.name === winningParticipantName) {\n                                    await res.data.characterStats.forEach(character => {\n                                        if (character.name === winningCharacter) {\n                                            character.wins = character.wins + 1;\n                                        };\n                                    });\n                                    const newUserData = {\n                                        characterStats: res.data.characterStats,\n                                    }\n                                    // update the winners user document in database with the +1 win on that character\n                                    API.updateUserByName(res.data.name, newUserData);\n                                }\n                                // for the non victorious participants\n                                else {\n                                    // find the character they lost with in the users database document and add one loss to their loss value\n                                    await res.data.characterStats.forEach(character => {\n                                        if (character.name === participant.currCharacter) {\n                                            character.losses = character.losses + 1;\n                                        };\n                                    });\n                                    const newUserData = {\n                                        characterStats: res.data.characterStats,\n                                    }\n                                    //updating the losers user document in database with +1 loss on their character\n                                    API.updateUserByName(res.data.name, newUserData);\n                                }\n                            }\n                            catch (err) {\n                                throw err;\n                            }\n                        })\n                })\n                // setting participants wins and what characters should be hidden if their is not a winner yet\n                if (winningParticipantData.wins !== winningParticipantData.squad.length) {\n                    for (let i = 0; i < winningParticipantData.wins; i++) {\n                        winningParticipantSquad[i].didWin = true;\n                    }\n                    if (winningParticipantSquad[winningParticipantData.squad.length - 1].hidden === true) {\n                        for (let i = 0; i < winningParticipantData.wins + 1; i++) {\n                            winningParticipantSquad[i].hidden = false;\n                            winningParticipantData.currCharacter = winningParticipantSquad.find(character => character.didWin === false).name;\n                            arenaParticipants[index] = winningParticipantData;\n                            API.updateArena(lobbyCode, { participants: arenaParticipants });\n                        }\n                    }\n                }\n                // if their is a winner update the users documents in the database\n                else {\n                    winningParticipantSquad[winningParticipantSquad.length - 1].didWin = true;\n                    API.updateArena(lobbyCode, { participants: arenaParticipants });\n                    arenaParticipants.forEach(participant => {\n                        // getting the user document from database\n                        API.getUserByName(participant.name)\n                            .then((res) => {\n                                // if this user was the winner add a win to their user document and update in database\n                                if (res.data.name === winningParticipantName) {\n                                    const newData = {\n                                        ironManStats: { wins: res.data.ironManStats.wins + 1, losses: res.data.ironManStats.losses }\n                                    };\n                                    API.updateUserByName(res.data.name, newData);\n                                }\n                                // if the user was not the winner add a loss to their user document and update in database\n                                else {\n                                    const newData = {\n                                        ironManStats: { wins: res.data.ironManStats.wins, losses: res.data.ironManStats.losses + 1 },\n                                    };\n                                    API.updateUserByName(res.data.name, newData);\n                                }\n                                // setting the winner state and telling the winner modal to display\n                                setWinner({ ...winner, name: winningParticipantData.name, portrait: winningParticipantData.portrait })\n                                winnerModalToggle();\n                            })\n                    })\n                }\n            })\n\n    }\n    // if participants have been set\n    if (participants !== undefined) {\n        // if the user has admin status meaning they created the arena display the rosters with the victorious buttons\n        if (name === arenaData.admin && participants.length > 1) {\n            return (\n                <Container fluid>\n                    {participants.map((participant) => {\n                        return (\n                            <Row id=\"roster\">\n                                <Row>\n                                    <Col sm={1} md={1}>\n                                        <button name={participant.name} onClick={openVote} id=\"victoryButton\" >Victorious</button>\n                                    </Col>\n                                    <Col id=\"userHeader\" sm={10} md={10}>\n                                        <img id=\"userPortrait\" src={participant.portrait} alt=\"participants portrait\" />\n                                        <h3 id=\"userName\">{participant.name}'s Roster</h3>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col id=\"characterList\" sm={12} md={12} >\n                                        {participant.squad.map(character => {\n                                            if (character.hidden === true && character !== participant.squad[0]) {\n                                                return (\n                                                    <div className=\"hiddenContainer\">\n                                                        <div className=\"hidden\" />\n                                                        <p>???</p>\n                                                    </div>\n                                                )\n                                            }\n                                            else if (character.didWin === true) {\n                                                return (\n                                                    <div className=\"character\">\n                                                        <div className=\"overlays\">\n                                                            <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\n                                                            <img className=\"didWin\" src=\"https://cdn.pixabay.com/photo/2021/08/04/02/34/green-checkmark-6520886__340.png\" alt=\"check mark\" />\n                                                        </div>\n                                                        <p id=\"characterName\">{character.name}</p>\n                                                    </div>\n                                                )\n                                            }\n                                            else {\n                                                return (\n                                                    <div className=\"character\">\n                                                        <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\n                                                        <p id=\"characterName\">{character.name}</p>\n                                                    </div>\n                                                )\n                                            }\n                                        })}\n                                        <Modal\n                                            isOpen={winnerModalIsOpen}\n                                            style={customStyles}\n                                            contentLabel=\"Modal\"\n                                            id=\"winnerModal\">\n                                            <h1>Congratulations!</h1>\n                                            <br />\n                                            <h2> {winner.name} </h2>\n                                            <br />\n                                            <img alt=\"winner portrait\" src={winner.portrait} id=\"winnerPortrait\" />\n                                            <br />\n                                            <br />\n                                            <h3> You Are The Smash King</h3>\n                                            <br />\n                                            <button\n                                                onClick={exitArena}\n                                            >Exit Arena</button>\n                                        </Modal>\n                                    </Col>\n                                </Row>\n                            </Row>\n                        )\n                    })}\n                </Container>\n\n            )\n        }\n        // if the user has joined the arena but does not have admin status display the rosters without the victorious buttons\n        else if (participants.length > 1) {\n            return (\n                <Container fluid>\n                    {participants.map((participant) => {\n                        return (\n                            <Row id=\"roster\">\n                                <Row>\n                                    <Col id=\"userHeader\" sm={12} md={12}>\n                                        <img id=\"userPortrait\" src={participant.portrait} alt=\"participants portrait\" />\n                                        <h3 id=\"userName\">{participant.name}'s Roster</h3>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                <Col id=\"characterList\" sm={12} md={12} >\n                                        {participant.squad.map(character => {\n                                            if (character.hidden === true && character !== participant.squad[0]) {\n                                                return (\n                                                    <div className=\"hiddenContainer\">\n                                                        <div className=\"hidden\" />\n                                                        <p>???</p>\n                                                    </div>\n                                                )\n                                            }\n                                            else if (character.didWin === true) {\n                                                return (\n                                                    <div className=\"character\">\n                                                        <div className=\"overlays\">\n                                                            <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\n                                                            <img className=\"didWin\" src=\"https://cdn.pixabay.com/photo/2021/08/04/02/34/green-checkmark-6520886__340.png\" alt=\"check mark\" />\n                                                        </div>\n                                                        <p id=\"characterName\">{character.name}</p>\n                                                    </div>\n                                                )\n                                            }\n                                            else {\n                                                return (\n                                                    <div className=\"character\">\n                                                        <img id=\"characterPortrait\" src={character.portrait} alt=\"characters portrait\" />\n                                                        <p id=\"characterName\">{character.name}</p>\n                                                    </div>\n                                                )\n                                            }\n                                        })}\n                                        <Modal\n                                            isOpen={winnerModalIsOpen}\n                                            style={customStyles}\n                                            contentLabel=\"Modal\"\n                                            id=\"winnerModal\">\n                                            <h1>Congratulations!</h1>\n                                            <br />\n                                            <h2> {winner.name} </h2>\n                                            <br />\n                                            <img alt=\"winner portrait\" src={winner.portrait} id=\"winnerPortrait\" />\n                                            <br />\n                                            <br />\n                                            <h3> You Are The Smash King</h3>\n                                            <br />\n                                            <button\n                                                onClick={exitArena}\n                                            >Exit Arena</button>\n                                        </Modal>\n                                        <Modal\n                                            isOpen={voteModalIsOpen}\n                                            style={customStyles}\n                                            contentLabel=\"Modal\"\n                                            id=\"voteModal\">\n                                            {didVote.current\n                                                ?\n                                                <div>\n                                                    <h1>Thank You For Your Vote!</h1>\n                                                    <h3>One Moment Please</h3>\n                                                    <Spinner animation=\"border\" role=\"status\">\n                                                        <span className=\"visually-hidden\">Loading...</span>\n                                                    </Spinner>\n                                                    <h3>All Votes Are Being Tallied</h3>\n                                                </div>\n                                                :\n                                                <div>\n                                                    <h1>Did {roundWinner}</h1>\n                                                    <h1>Win That Round?</h1>\n                                                    <br />\n                                                    <button\n                                                        id=\"yesButton\"\n                                                        onClick={() => {\n                                                            vote.current = \"Yes\"\n                                                            didVote.current = true\n                                                        }}\n                                                    > Yes\n                                                        <i class=\"fas fa-thumbs-up\"></i>\n                                                    </button>\n                                                    <button\n                                                        id=\"noButton\"\n                                                        onClick={() => {\n                                                            vote.current = \"No\"\n                                                            didVote.current = true\n                                                        }}\n                                                    >No\n                                                        <i class=\"fas fa-thumbs-down\"></i>\n                                                    </button>\n                                                </div>\n                                            }\n                                        </Modal>\n                                    </Col>\n                                </Row>\n                            </Row>\n                        )\n                    })}\n                </Container>\n            )\n\n        }\n        else {\n            return (\n                <Container>\n                    <Row>\n                        <Col sm={12} md={12} id=\"waitingScreen\">\n                            <h1>Waiting For Someone To Join Your Arena</h1>\n                            <br />\n                            <Spinner animation=\"border\" role=\"status\">\n                                <span className=\"visually-hidden\">Loading...</span>\n                            </Spinner>\n                        </Col>\n                    </Row>\n                </Container>\n            )\n        }\n    }\n}\nexport default SquadMaker;","import { React, useEffect, useState } from \"react\";\nimport API from \"../../utils/API\";\nimport SquadMaker from \"../../components/SquadMaker/squadMaker\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./arena.css\";\nimport Footer from \"../../components/Footer/footer\"\n\nfunction Arena() {\n    // getting lobbycode from url\n    const lobbyCode = window.location.pathname.substr(-6);\n    // setting up state to hold arena data\n    const [arenaData, setArenaData] = useState();\n    // reroute to dashboard if leave arena button is clicked\n    const leaveArena = () => {\n        window.open(\"http://localhost:3000/dashboard\", \"_self\");\n    };\n    // getting arena data by lobby code and storing it in arenaData state\n    useEffect(() => {\n        API.getArenaByLobbyCode(lobbyCode)\n            .then((res) => {\n                setArenaData({\n                    LobbyCode: res.data.lobbyCode,\n                    brawlers: res.data.brawlers,\n                    participants: res.data.participants.length\n                })\n            })\n    }, []);\n    if (arenaData !== undefined) {\n        return (\n            <div>\n                <Container id=\"arena\" fluid>\n                    <Row id=\"header\">\n                        <Col sm={12} md={10}>\n                            <h1 id=\"header1\">Welcome to Smash Town</h1>\n                        </Col>\n                        <Col sm={12} md={2}>\n                            <button\n                                id=\"leaveButton\"\n                                onClick={leaveArena}\n                            >Leave Arena</button>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"smallHeaders\" sm={12} md={12}>\n                            <h4>Lobby Code: {arenaData.LobbyCode}</h4>\n                        </Col>\n                        <Col className=\"smallHeaders\" sm={12} md={12}>\n                            <h4>{arenaData.brawlers} Man Iron Man</h4>\n                        </Col>\n                    </Row>\n                    <Row id=\"rosterWindow\">\n                        <SquadMaker />\n                    </Row>\n                </Container>\n                <Footer />\n            </div>\n        )\n    }\n    else {\n        return (\n            <>\n            </>\n        )\n    }\n}\n\nexport default Arena;","import { React, useEffect, useState, useContext, useRef } from \"react\";\nimport { Container, Col, Row, Spinner } from \"react-bootstrap\";\nimport Modal from \"react-modal\";\nimport API from \"../../utils/API\";\nimport UserContext from \"../../utils/UserContext\";\nimport \"./bracket.css\";\nfunction Bracket() {\n\n    const { name } = useContext(UserContext);\n    const lobbyCode = window.location.pathname.substr(-6);\n    const [participants, setParticipants] = useState([]);\n    const [tournamentData, setTournamentData] = useState({});\n    const [matches, setMatches] = useState();\n    const [round, setRound] = useState();\n    const roundVictors = useRef();\n    const winnerModalIsOpen = useRef();\n    const [winner, setWinner] = useState({\n        name: \"\",\n        portrait: \"\",\n        character: {}\n    });\n\n    const winnerModalToggle = () => {\n        winnerModalIsOpen.current = true\n    };\n    const customStyles = {\n        content: {\n            top: \"50%\",\n            left: \"50%\",\n            right: \"auto\",\n            bottom: \"auto\",\n            marginRight: \"-50%\",\n            transform: \"translate(-50%, -50%)\",\n            background: \"rgb(189, 189, 189)\",\n        }\n    };\n\n    useEffect(() => {\n        let myInterval = setInterval(async () => {\n            try {\n                API.getTournamentByLobbyCode(lobbyCode)\n                    .then(async (res) => {\n                        try {\n                            if (res.data.tournamentSize === \"4\" && res.data.tournamentLaunched === true) {\n                                if (res.data.round === 1) {\n                                    const victorArray = []\n                                    res.data.round1.forEach((match) => {\n                                        victorArray.push(match.victor);\n                                    });\n                                    roundVictors.current = victorArray;\n                                    if (roundVictors.current.indexOf(\"\") === -1) {\n                                        const newData = {\n                                            round2: [{\n                                                match: 1,\n                                                participants: [roundVictors.current[0], roundVictors.current[1]],\n                                                victor: \"\"\n                                            }],\n                                            round: 2\n                                        }\n                                        API.updateTournament(lobbyCode, newData);\n                                    }\n                                }\n                                else if (res.data.round === 2 && res.data.round2[0].victor !== \"\") {\n                                    setWinner({\n                                        name: res.data.round2[0].victor.name,\n                                        portrait: res.data.round2[0].victor.portrait,\n                                        character: {\n                                            name: res.data.round2[0].victor.character.name,\n                                            portrait: res.data.round2[0].victor.character.portrait,\n                                            quote: res.data.round2[0].victor.character.quote\n                                        }\n                                    })\n                                    winnerModalToggle();\n                                }\n                            }\n                            else if (res.data.tournamentSize === \"8\" && res.data.tournamentLaunched === true) {\n                                if (res.data.round === 1) {\n                                    const victorArray = []\n                                    res.data.round1.forEach((match) => {\n                                        victorArray.push(match.victor);\n                                    });\n                                    roundVictors.current = victorArray;\n                                    if (roundVictors.current.indexOf(\"\") === -1) {\n                                        const newData = {\n                                            round2: [{\n                                                match: 1,\n                                                participants: [roundVictors.current[0], roundVictors.current[1]],\n                                                victor: \"\"\n                                            }, {\n                                                match: 2,\n                                                participants: [roundVictors.current[2], roundVictors.current[3]],\n                                                victor: \"\"\n                                            }],\n                                            round: 2\n                                        }\n                                        API.updateTournament(lobbyCode, newData);\n                                    }\n                                }\n                                else if (res.data.round === 2) {\n                                    const victorArray = []\n                                    res.data.round2.forEach((match) => {\n                                        victorArray.push(match.victor);\n                                    });\n                                    roundVictors.current = victorArray;\n                                    if (roundVictors.current.indexOf(\"\") === -1) {\n                                        const newData = {\n                                            round3: [{\n                                                match: 1,\n                                                participants: [roundVictors.current[0], roundVictors.current[1]],\n                                                victor: \"\"\n                                            }],\n                                            round: 3\n                                        }\n                                        API.updateTournament(lobbyCode, newData);\n                                    }\n                                }\n                                else if (res.data.round === 3 && res.data.round3[0].victor !== \"\") {\n                                    setWinner({\n                                        name: res.data.round3[0].victor.name,\n                                        portrait: res.data.round3[0].victor.portrait,\n                                        character: {\n                                            name: res.data.round3[0].victor.character.name,\n                                            portrait: res.data.round3[0].victor.character.portrait,\n                                            quote: res.data.round3[0].victor.character.quote\n                                        }\n                                    })\n                                    winnerModalToggle();\n                                }\n                            }\n                            setParticipants(res.data.participants);\n                            setRound(res.data.round);\n                            setTournamentData(res.data);\n                            if (res.data.round === 1) {\n                                setMatches(res.data.round1)\n                            }\n                            else if (res.data.round === 2) {\n                                setMatches(res.data.round2)\n                            }\n                            else if (res.data.round === 3) {\n                                setMatches(res.data.round3)\n                            };\n                        }\n                        catch (err) {\n                            throw err;\n                        };\n                    });\n            }\n            catch (err) {\n                throw err;\n            }\n        }, 2000);\n        return () => {\n            clearInterval(myInterval);\n        };\n    }, []);\n\n    const launchTournament = () => {\n        const humanArr = participants.filter(participant => participant.name.substr(0, 3) !== \"Bye\");\n        const byeArr = participants.filter(participant => participant.name.substr(0, 3) === \"Bye\");\n        let byeCount = 0;\n        byeArr.forEach((bye) => {\n            byeCount = byeCount + 1;\n            bye.name = \"Bye \" + byeCount\n        });\n        for (let i = humanArr.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = humanArr[i];\n            humanArr[i] = humanArr[j];\n            humanArr[j] = temp;\n        }\n        console.log(humanArr, \"human\")\n        console.log(byeArr, \"byes\")\n        let index = 0\n        byeArr.forEach((bye) => {\n            humanArr.splice(index, 0, bye);\n            index = index + 2\n        })\n        API.getTournamentByLobbyCode(lobbyCode)\n            .then((res) => {\n                if (res.data.tournamentSize === \"4\") {\n\n                    API.updateTournament(lobbyCode, {\n                        round1: [{\n                            match: 1,\n                            participants: [humanArr[0], humanArr[1]],\n                            victor: \"\"\n                        },\n                        {\n                            match: 2,\n                            participants: [humanArr[2], humanArr[3]],\n                            victor: \"\"\n                        }],\n                        tournamentLaunched: true,\n                        round: 1\n                    });\n                }\n                else {\n\n                    API.updateTournament(lobbyCode, {\n                        round1: [{\n                            match: 1,\n                            participants: [humanArr[0], humanArr[1]],\n                            victor: \"\"\n                        },\n                        {\n                            match: 2,\n                            participants: [humanArr[2], humanArr[3]],\n                            victor: \"\"\n                        },\n                        {\n                            match: 3,\n                            participants: [humanArr[4], humanArr[5]],\n                            victor: \"\"\n                        },\n                        {\n                            match: 4,\n                            participants: [humanArr[6], humanArr[7]],\n                            victor: \"\"\n                        }],\n                        tournamentLaunched: true,\n                        round: 1\n                    });\n                };\n            });\n    };\n    const characterUpdater = (res, thisMatch, victor) => {\n        if (round === 1) {\n            res.data.round1[thisMatch].participants.forEach((participant) => {\n                if (participant.name.substring(0, 3) !== \"Bye\" && participant.name === victor) {\n                    const winningCharacter = participant.character.name\n                    API.getUserByName(victor)\n                        .then((res) => {\n                            res.data.characterStats.forEach(character => {\n                                if (character.name === winningCharacter) {\n                                    character.wins = character.wins + 1;\n                                }\n                            })\n                            const newUserData = {\n                                characterStats: res.data.characterStats,\n                            }\n                            API.updateUserByName(res.data.name, newUserData);\n                        })\n                }\n                else if (participant.name.substring(0, 3) !== \"Bye\") {\n                    const losingCharacter = participant.character.name\n                    API.getUserByName(participant.name)\n                        .then((res) => {\n                            res.data.characterStats.forEach(character => {\n                                if (character.name === losingCharacter) {\n                                    character.losses = character.losses + 1;\n                                }\n                            })\n                            const newUserData = {\n                                characterStats: res.data.characterStats,\n                            }\n                            API.updateUserByName(res.data.name, newUserData);\n                        })\n                }\n\n            })\n        }\n        else if (round === 2) {\n            res.data.round2[thisMatch].participants.forEach((participant) => {\n                if (participant.name.substring(0, 3) !== \"Bye\" && participant.name === victor) {\n                    const winningCharacter = participant.character.name\n                    API.getUserByName(victor)\n                        .then((res) => {\n                            res.data.characterStats.forEach(character => {\n                                if (character.name === winningCharacter) {\n                                    character.wins = character.wins + 1;\n                                }\n                            })\n                            const newUserData = {\n                                characterStats: res.data.characterStats,\n                            }\n                            API.updateUserByName(res.data.name, newUserData);\n                        })\n                }\n                else if (participant.name.substring(0, 3) !== \"Bye\") {\n                    const losingCharacter = participant.character.name\n                    API.getUserByName(participant.name)\n                        .then((res) => {\n                            res.data.characterStats.forEach(character => {\n                                if (character.name === losingCharacter) {\n                                    character.losses = character.losses + 1;\n                                }\n                            })\n                            const newUserData = {\n                                characterStats: res.data.characterStats,\n                            }\n                            API.updateUserByName(res.data.name, newUserData);\n                        })\n                }\n\n            })\n        }\n        else if (round === 3) {\n            res.data.round3[thisMatch].participants.forEach((participant) => {\n                if (participant.name.substring(0, 3) !== \"Bye\" && participant.name === victor) {\n                    const winningCharacter = participant.character.name\n                    API.getUserByName(victor)\n                        .then((res) => {\n                            res.data.characterStats.forEach(character => {\n                                if (character.name === winningCharacter) {\n                                    character.wins = character.wins + 1;\n                                }\n                            })\n                            const newUserData = {\n                                characterStats: res.data.characterStats,\n                            }\n                            API.updateUserByName(res.data.name, newUserData);\n                        })\n                }\n                else if (participant.name.substring(0, 3) !== \"Bye\") {\n                    const losingCharacter = participant.character.name\n                    API.getUserByName(participant.name)\n                        .then((res) => {\n                            res.data.characterStats.forEach(character => {\n                                if (character.name === losingCharacter) {\n                                    character.losses = character.losses + 1;\n                                }\n                            })\n                            const newUserData = {\n                                characterStats: res.data.characterStats,\n                            }\n                            API.updateUserByName(res.data.name, newUserData);\n                        })\n                }\n            })\n        }\n    }\n    const victorSelect = (event) => {\n        if (name === tournamentData.admin) {\n            const victor = event.target.innerText;\n            API.getTournamentByLobbyCode(lobbyCode)\n                .then((res) => {\n                    if (round === 1) {\n                        let newData = [];\n                        res.data.round1.forEach((match) => {\n                            const search = match.participants.findIndex((participant) => participant.name === victor)\n                            if (search !== -1) {\n                                const thisMatch = match.match - 1\n                                const newMatch = { match: thisMatch + 1, participants: res.data.round1[thisMatch].participants, victor: res.data.round1[thisMatch].participants.find(el => el.name === victor) }\n                                newData.push(newMatch);\n                                characterUpdater(res, thisMatch, victor);\n                            }\n                            else {\n                                newData.push(match);\n                            }\n                        })\n                        API.updateTournament(lobbyCode, {\n                            round1: newData\n                        });\n                    }\n                    else if (round === 2 && res.data.tournamentSize === \"8\") {\n                        let newData = [];\n                        res.data.round2.forEach((match) => {\n                            const search = match.participants.findIndex((participant) => participant.name === victor)\n                            if (search !== -1) {\n                                const thisMatch = match.match - 1\n                                const newMatch = { match: thisMatch + 1, participants: res.data.round2[thisMatch].participants, victor: res.data.round2[thisMatch].participants.find(el => el.name === victor) }\n                                newData.push(newMatch);\n                                characterUpdater(res, thisMatch, victor);\n                            }\n                            else {\n                                newData.push(match);\n                            }\n                        })\n                        API.updateTournament(lobbyCode, {\n                            round2: newData\n                        });\n                    }\n                    else if (round === 2 && res.data.tournamentSize === \"4\") {\n                        let newData = [];\n                        res.data.round2.forEach((match) => {\n                            const search = match.participants.findIndex((participant) => participant.name === victor)\n                            if (search !== -1) {\n                                const thisMatch = match.match - 1\n                                const newMatch = { match: thisMatch + 1, participants: res.data.round2[thisMatch].participants, victor: res.data.round2[thisMatch].participants.find(el => el.name === victor) }\n                                newData.push(newMatch);\n                                characterUpdater(res, thisMatch, victor);\n                            }\n                            else {\n                                newData.push(match);\n                            }\n                        })\n                        API.updateTournament(lobbyCode, {\n                            round2: newData\n                        })\n                            .then((res) => {\n                                API.getTournamentByLobbyCode(lobbyCode)\n                                    .then((res) => {\n                                        const tournamentChampion = res.data.round2[0].victor.name;\n                                        const humanParticipants = res.data.participants.filter(participant => participant.name.substr(0, 3) !== \"Bye\");\n                                        humanParticipants.forEach((participant) => {\n                                            API.getUserByName(participant.name)\n                                                .then((res) => {\n                                                    if (res.data.name === tournamentChampion) {\n                                                        const newData = {\n                                                            tourneyStats: { wins: res.data.tourneyStats.wins + 1, losses: res.data.tourneyStats.losses }\n                                                        }\n                                                        API.updateUserByName(participant.name, newData);\n                                                    }\n                                                    else {\n                                                        const newData = {\n                                                            tourneyStats: { wins: res.data.tourneyStats.wins, losses: res.data.tourneyStats.losses + 1 }\n                                                        }\n                                                        API.updateUserByName(participant.name, newData);\n                                                    }\n                                                })\n                                        })\n                                    })\n                            })\n                    }\n                    else if (round === 3) {\n                        let newData = [];\n                        res.data.round3.forEach((match) => {\n                            const search = match.participants.findIndex((participant) => participant.name === victor)\n                            if (search !== -1) {\n                                const thisMatch = match.match - 1\n                                const newMatch = { match: thisMatch + 1, participants: res.data.round3[thisMatch].participants, victor: res.data.round3[thisMatch].participants.find(el => el.name === victor) }\n                                newData.push(newMatch);\n                                characterUpdater(res, thisMatch, victor);\n                            }\n                            else {\n                                newData.push(match);\n                            }\n                        })\n                        API.updateTournament(lobbyCode, {\n                            round3: newData\n                        })\n                            .then(() => {\n                                API.getTournamentByLobbyCode(lobbyCode)\n                                    .then((res) => {\n                                        const tournamentChampion = res.data.round3[0].victor.name;\n                                        const humanParticipants = res.data.participants.filter(participant => participant.name.substr(0, 3) !== \"Bye\");\n                                        humanParticipants.forEach((participant) => {\n                                            API.getUserByName(participant.name)\n                                                .then((res) => {\n                                                    if (res.data.name === tournamentChampion) {\n                                                        const newData = {\n                                                            tourneyStats: { wins: res.data.tourneyStats.wins + 1, losses: res.data.tourneyStats.losses }\n                                                        }\n                                                        API.updateUserByName(participant.name, newData);\n                                                    }\n                                                    else {\n                                                        const newData = {\n                                                            tourneyStats: { wins: res.data.tourneyStats.wins, losses: res.data.tourneyStats.losses + 1 }\n                                                        }\n                                                        API.updateUserByName(participant.name, newData);\n                                                    }\n                                                })\n                                        })\n                                    })\n                            })\n                    }\n                })\n        }\n    }\n\n    const exitTournament = () => {\n        window.open(\"http://localhost:3000/dashboard\", \"_self\");\n    };\n\n    if (participants.length > 0) {\n        return (\n            <Container id=\"bracketContainer\">\n                {\n                    tournamentData.tournamentLaunched && matches\n                        ?\n                        <div>\n                           { \n                           name === tournamentData.admin\n                           ?\n                           <Row>\n                                <Col sm={12} md={12}>\n                                    <h3>Click On The Match Victor To Advance Them</h3>\n                                </Col>\n                            </Row>\n                            :\n                            <></>\n                            }\n                            <Row>\n                                <Col sm={12} md={12}>\n                                    <h1>Round {round}</h1>\n                                </Col>\n                            </Row>\n                            <Row id=\"bracket\">\n                                <Col sm={12} md={12}>\n                                    <div>\n                                        {matches.map((match) => {\n                                            return (\n                                                <div className=\"matches\">\n                                                    <h3>Match {match.match}</h3>\n                                                    {match.participants.map((participant) => {\n                                                        return (\n                                                            <div id=\"matchContent\">\n                                                                <div\n                                                                    className=\"competitor\"\n                                                                    style={{ backgroundColor: participant.character.color }}\n                                                                    onClick={victorSelect}\n                                                                >\n                                                                    <img alt=\"participant character\" src={participant.character.portrait} id=\"compChar\" />\n                                                                    <p id=\"compName\">{participant.name}</p>\n                                                                </div>\n                                                                {\n                                                                    match.participants.findIndex(el => el.name === participant.name) === 0\n                                                                        ?\n                                                                        <h2 id=\"vs\">VS</h2>\n                                                                        :\n                                                                        <div></div>\n                                                                }\n                                                            </div>\n                                                        )\n                                                    })}\n                                                    <h4>Victor:</h4>\n                                                    {\n                                                        match.victor !== \"\"\n                                                            ?\n                                                            <div\n                                                                className=\"competitor\"\n                                                                style={{ backgroundColor: match.victor.character.color }}\n                                                            >\n                                                                <img alt=\"participant character\" src={match.victor.character.portrait} id=\"compChar\" />\n                                                                <p id=\"compName\">{match.victor.name}</p>\n                                                            </div>\n                                                            :\n                                                            <h5>To be Decided</h5>\n                                                    }\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                    <Modal\n                                        isOpen={winnerModalIsOpen.current}\n                                        style={customStyles}\n                                        contentLabel=\"Modal\"\n                                        id=\"winnerModal\">\n                                        <h1>Congratulations!</h1>\n                                        <br />\n                                        <h2> {winner.name} </h2>\n                                        <img alt=\"winner portrait\" src={winner.portrait} />\n                                        <br />\n                                        <br />\n                                        <h3>You Have Become One With</h3>\n                                        <br />\n                                        <h2>{winner.character.name}</h2>\n                                        <img alt=\"characterPortrait\" src={winner.character.portrait} id=\"characterWinner\" />\n                                        <h3>{winner.character.quote}</h3>\n                                        <br />\n                                        <br />\n                                        <button\n                                            onClick={exitTournament}\n                                        >Exit Tournament</button>\n                                    </Modal>\n                                </Col>\n                            </Row>\n                        </div>\n                        :\n                        <Row>\n                            <Col sm={12} md={12} id=\"preLaunch\">\n                                <h3>Current Competitors:</h3>\n                                {participants.map((participant) => {\n                                    return (\n                                        <div className=\"competitor\" style={{ backgroundColor: participant.character.color }}>\n                                            <img alt=\"participant character\" src={participant.character.portrait} id=\"compChar\" />\n                                            <p id=\"compName\">{participant.name}</p>\n                                        </div>\n                                    )\n                                })}\n                                <br />\n                                {\n                                    name === tournamentData.admin\n                                        ?\n                                        <button\n                                            id=\"launchButton\"\n                                            onClick={launchTournament}>Launch Tournament</button>\n                                        :\n                                        <div />\n                                }\n                            </Col>\n                        </Row>\n                }\n            </Container>\n        );\n    }\n    else {\n        return (\n            <Container>\n                <Row>\n                    <Col sm={12} md={12} id=\"waitingScreen\">\n                        <h1>Setting Up The Tournament</h1>\n                        <br />\n                        <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"visually-hidden\">Loading...</span>\n                        </Spinner>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    };\n};\n\nexport default Bracket;","import {React,useState, useEffect} from \"react\";\nimport Bracket from \"../../components/Bracket/bracket\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport API from \"../../utils/API\";\nimport \"./tournament.css\";\nimport Footer from \"../../components//Footer/footer\";\n\nfunction Tournament() {\n    const lobbyCode = window.location.pathname.substr(-6);\n    const [tournamentData, setTournamentData] = useState({\n        tournamentSize:undefined\n    });\n\n    const exitTournament = () => {\n        window.open(\"http://localhost:3000/dashboard\", \"_self\");\n    }\n\n    useEffect(()=>{\n        API.getTournamentByLobbyCode(lobbyCode)\n        .then((res) => {\n            setTournamentData(res.data)\n        })\n    },[])\n    return (\n        <div>\n        <Container fluid id=\"tournamentPage\">\n            <Row id=\"header\">\n                <Col sm={12} md={10} id=\"header\">\n                    <h1 id=\"header1\">Welcome to Smashville</h1>\n                </Col>\n                <Col sm={12} md={2}>\n                <button\n                    onClick={exitTournament}\n                    id=\"leaveButton\">Leave Tournament</button>\n                </Col>\n            </Row>\n            <Row>\n                <Col sm={12} md={12} id=\"smallHeaders\">\n                    <h4>LobbyCode: {lobbyCode}</h4>\n                    {tournamentData.tournamentSize !== undefined\n                        ?\n                        <h4>{tournamentData.tournamentSize} Man Tournament</h4>\n                        :\n                        <div />\n                    }\n                </Col>\n            </Row>\n            <Row>\n                <Col sm={12} md={12}>\n                    <Bracket />\n                </Col>\n\n            </Row>\n        </Container>\n        <Footer />\n        </div>\n    )\n}\n\nexport default Tournament;","import { React, useState, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Login from \"./pages/LoginScreen/loginScreen\";\nimport Dashboard from \"./pages/MainDashboard/mainDashboard\";\nimport Arena from \"./pages/Arena/arena\";\nimport Tournament from \"./pages/Tournament/tournament\";\nimport axios from \"axios\";\nimport API from \"./utils/API\";\nimport UserContext from \"./utils/UserContext\";\n\nfunction App() {\n  // logged in user data that is linked to usercontext\n  const [userState, setUserState] = useState({\n    id: \"\",\n    name: \"\",\n    portrait: \"\",\n    LobbyCode: \"\",\n    participants: [],\n    competitors: \"\",\n    brawlers: \"\"\n  });\n\n  //function to update user context passed down as prop\n  const updateContext = (LobbyCode, participants, brawlers) => {\n    setUserState({\n      ...userState,\n      LobbyCode: LobbyCode,\n      participants: participants,\n      brawlers: brawlers\n    })\n  }\n  // sets userState on login\n  useEffect(() => {\n    axios\n      .get(\"/User\")\n      .then((res) => {\n        if (res.data.id) {\n          API.getUserByUserId(res.data.id)\n            .then(res => {\n              setUserState({\n                ...userState,\n                id: res.data._id,\n                name: res.data.name,\n                portrait: res.data.portrait,\n              });\n            });\n        }\n        else {\n          return;\n        }\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n        <UserContext.Provider value={userState} id=\"container\">\n          <BrowserRouter>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path=\"/dashboard\" >\n                <Dashboard updateContext={updateContext} />\n              </Route>\n              <Route path=\"/arena\" component={Arena} />\n              <Route path=\"/tournament\" component={Tournament} />\n            </Switch>\n          </BrowserRouter>\n        </UserContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}